

* Dotfiles
** Why ?

I discovered system crafting / configuration thanks to [[https://larbs.xyz/][LARBS]] / [[https://archlinux.org/][Archlinux]] and fell into the rabbithole of system configuration, mainly for long-term efficiency reasons. I was happy with Arch, but then had some issues with my computer, and suffered from the lack portability and reproducibility of Arch.

I discovered GNU Guix thanks to David Wilson and started to configure my system, based on [[https://github.com/daviwil/dotfiles][David Wilson's]] and [[https://git.sr.ht/~krevedkokun/dotfiles][krevedkokun's dotfiles]], and on [[https://larbs.xyz/][LARBS' scripts]]. I've finally migrated my config under [[https://git.sr.ht/~abcdw/rde][Andrew Tropin's RDE]].

The code relies on hidden data, and won't work if deployed as such. However, the code follows a modular structure, thus helping with cherry-picking snippets. This code is licensed under GPLv3+, although the license isn't provided in the repo.

*** RDE

RDE is a developers and power user friendly GNU/Linux distribution, based on GNU Guix.

**** Principles

More detailed description can be found in the [[https://trop.in/rde/manual#Principles][manual]].
***** Main
- Ergonomic :: Sane keybindings, good contrast, readable fonts.
- Reproducible :: Setup can be easily replicated.
- Hackable :: Easy to throw out or modify any part of setup.
- Stateless :: All state must be explicit and syncable or temporary.
***** Secondary
- Lightweight and battery efficient :: wayland, fast native apps.
- Offline :: most of workflows and apps should work without network.
- Attention-friendly :: minimal use of notification and other distractive things.

**** Differences of this config

The code is a direct use of rde system. Here are the main differences :
- using evil-mode for emacs and sway.
- emacs' configuration is quite similar to David Wilson's former dotfiles
- a whole server configuration, included in dotfiles (cuirass, git, rsync for now).

** Usage

Every useful command is kept in the main =Makefile=.

*** Channels

Guix supports the concept of [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]] which contain Guix package definitions that can be installed on your machine.  Aside from the =%default-channels= list, I also use the [[https://gitlab.com/nonguix/nonguix][Nonguix]] channel to install packages that aren't included with Guix by default like the non-free Linux kernel, as well as [[https://git.sr.ht/~abcdw/rde][Andrew Tropin's RDE]].

I take a monolithic approach with this repo: the =channels.scm= file only encapsulates this repo, while the =.guix-channel= file includes these dependencies. You can generate the =.guix-channel= file by running =make channel=, with the optional abiblity to pin or freeze commits with arguments of the function =dots-channels=. The generation of =channels.scm= is included in the =make home= call.

*** Updating guix home

=make home=

*** Updating guix system

=make system=

*** Checking for error in tangled files

=make check=

*** If a font package has been updated and causes issues

=make update-fonts=

*** GnuPG
Asymmetric / public-key cryptography use cases
- Sign the work (binaries, commits, tags)
- Encrypt (files, emails, passwords)
- Authenticate (SSH, Git, VPN)
- Create and sign other keys

See https://gist.github.com/abcdw/3ee8fc771ce5b0b9e50ce670756cbe2d for more info.

**** Generating key and subkeys
Do it in a safe environment.
#+begin_src shell
gpg --expert --full-generate-key
gpg --edit-key
addkey
#+end_src
**** Backing up keys
#+begin_src shell
# Use encrypted flash drive or similiar tool instead of ~/gpg-backup dir
# For more information: https://github.com/drduh/YubiKey-Guide#backup
mkdir ~/gpg-backup
gpg --export-secret-keys > ~/gpg-backup/keys.gpg
gpg --export-secret-subkeys > ~/gpg-backup/subkeys.gpg
#+end_src
**** Publishing key
- keyserver
- web
- email/etc
**** Searching for key
#+begin_src shell
gpg --keyserver keyserver.ubuntu.com --search-keys KEYID
#+end_src
**** Importing keys
**** Generating ssh public key
https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
https://github.com/drduh/YubiKey-Guide#ssh
**** Extending expire date
**** TODO Management :
- one main key
- subkeys for different use cases :
  - work
  - ecological awakening
  - free software contributions

*** SSH
Today SSH relies on a pretty exotic configuration that is to be adapted. Instead of having whole ssh configurations stored in .gpg files, my current ssh connections will instead rely on GnuPG.

*** Org Mode

**** Workflow Principles

***** Don't look at Org files to find the next task, use the agenda view
***** Ensure sufficient metadata on tasks for effective filtering
***** Keep a daily log of work being done
***** Set timers on tasks
Use =org-timer-set-timer= to set a countdown timer for a task based on the "effort" value I set on it.
***** Future ideas and objectives
****** Learning panel ?
- I should use org-roam to synthetize information and org-drill in order to batch learn things easily. Maybe also having a learning.org and a learning tab is good practice in order to planify more clearly how I intend to learn things.

****** Manage proper clocking
I have read the corresponding man page quickly, seems pretty simple, but how is the information used after that ?
****** Email integration
- haven't tested how this integration works for now, maybe as simple as an org-capture.
- Workfkow : mail inbox --> todo.org --> review every evening ?
- have read a blog post claiming that emacs wasn't necessarily good with a lot of big extensions (mu4e, elfeed), mail ?
****** Block time properly on 25 minutes blocks + 5 min break
- Maybe inquire into the pomodoro technique ?
  Or maybe it's just good straightforward when properly done ?
****** Objective : set a goal on how organized should you be in beginning of January.
**** Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily:

- =TODO= - A task that should be done at some point
- =NEXT= - This task should be done next (in the Getting Things Done sense) Beware !
- =HOLD= - Waiting for someone else to be actionable again
- =DONE= - It's done!

I also make sure to set them up in the order I want =org-sort-entries= to sort them in when I use the =o= option upon invoking that command.

**** Tags

Tags are used to filter all tasks to find anything actionable in a particular context.  I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =manage= - I'm the person responsible for setting the rythm for this task. People rely on you, it should be prioritized above others.
- =organize= - This task should in some time help to complete other tasks (faster or simply the case). To prioritize over unproductive tasks.
- =followup= - Someone is waiting on me to follow up or give feedback on this task, it should be prioritized above others
- =batch= - The task can be batched with others (low effort)

**** Agendas

My agenda configuration is a custom one.

It integrates three different org-agenda-custom-commands :
- =Agenda of the day= is a classic agenda with an integrated =Current tasks= part.
- =Overview= is a complete agenda with priorities and workflow states and tags proper discrimination.
- =Review= is a agenda with =Backlog= and unprioritized =TODO= states.

Currently still customizing my agenda to match my expected use, I'll try to migrate it to rde later.

**** Note-taking

***** TODO Roam

This small description of a possible workflow with org-roam note-taking is highly inspired by [[https://jethrokuan.github.io/org-roam-guide/][Jethro Kuan's Org Roam guide]]. It's modified to fit RDE.

***** TODO Bibliography

*** Flatpak

The rationale for using flatpak is that some very popular applications are not present on GNU Guix. I'm trying to keep minimal dependencies on flatpak packages.

I'm using Ferdi to minimize the need to install various packages for discord, slack & co. And to keep configuration somewhere, although this time not in my dotfiles. Ferdi has had a few issues in the last couple of months, but seems to be online working again.

Proprietary apps and apps that use non-GTK, non-Qt toolkits are often limited to X11-only, which means they require =Xwayland= in order to work in a Wayland session. Hence the ~(xwayland enable)~ option in Sway configuration.

Some settings to add on wayland include ~--socket=wayland~Â and ~--enable-features=UseOzonePlatform --ozone-platform=wayland~ (if the app is based on Electron).

In any way, we can imagine flatpak apps to be put in a wrapper to avoid repeat actions, when essential to a workflow. Maybe a hint for a future contribution ?

** System Installation

Here's a guide for how I install my RDE systems on a computer.  This process is extremely simplified, and implies you start with an already configured RDE system. If you need to start from scratch or bootstrap, you might want to take a look at the [[https://guix.gnu.org/manual/en/html_node/System-Installation.html][official installation guide]] or the [[https://wiki.systemcrafters.cc/guix/nonguix-installation-guide][Systems Crafters nonguix installation guide]] on how to do it.

*** Building the Installation Image

You need to create a slightly larger install image to ensure you have enough headroom for temporary file create and "no free space" errors.
The installation image can be built with this command in the ~dotfiles~ directory:

#+begin_src sh
GUILE_LOAD_PATH=./ RDE_TARGET=live-install guix system image ./config.scm --image-size=7G
#+end_src

*NOTE:* It can take an hour or more for this to complete, so be patient...

Once the build is complete, Guix will print out the path to the disk image file that was created.  You can now write the installation image to a USB stick using =dd=:

#+begin_src sh
sudo dd if=/gnu/store/{sha256}-disk-image of=/dev/sdX bs=1M status=progress
#+end_src

*** Installing Guix

With the newly "burned" installation image, boot from the USB drive and choose "Install using the shell based process."

**** Setting up WiFi

The procedure counselled in the System Crafters wiki is quite a hassle and often fails. This was a reason to get rid of =connman= and use =NetworkManager= in the configuration, even though the former is lighter. Wifi configuration simply becomes :

#+begin_src sh
rfkill unblock all
nmtui
#+end_src

**** Setting Up Partitions

Steps to setup partitions are inspired by the ~etc/install.sh~ script from akagi.

Since we're installing on a ThinkPad with UEFI, follow the [[https://guix.gnu.org/manual/en/guix.html#Disk-Partitioning][instructions in the Guix manual]] for disk partitioning.  The short of it is that you need to use =fdisk= to create a partition in your free space:

#+begin_src sh
fdisk /dev/sda
#+end_src

Once you have your Linux root partition set up, you can make file-systems and enable LUKS to encrypt that partition by running the following commands (=enc= is an arbitrary label but is used in =make btrfs= so respect the label):

#+begin_src sh
mkfs.vfat -F32 /dev/<EFI partition>
mkswap /dev/<SWAP partition>
cryptsetup luksFormat /dev/<root partition>
cryptsetup open --type luks /dev/<root partition> enc
mkfs.btrfs /dev/mapper/enc
#+end_src

The remaining configuration is summarized in the simple script =make btrfs=. This script creates btrfs subvolumes =root=, =boot=, =home=, =store=, =log= and =data=. Once subvolumes are created, it mounts the root filesystem from =enc= device, and then mount all =btrfs= subvolumes.

Finally, make sure to mount your EFI partition to =/mnt/boot= so that the installer can install the bootloader. Make also sure to swapon your swap partition.

#+begin_src sh
mkdir -p /mnt/boot/efi
mount /dev/<EFI partition> /mnt/boot/efi
swapon /dev/<SWAP partition>
#+end_src

Now your EFI and encrypted root filesystems are mounted so you can proceed with system installation. You must now set up the installation environment using =herd=:

#+begin_src sh
herd start cow-store /mnt
#+end_src

**** Initial System Installation

The system configuration and sources are already packaged in the live-image created with =make image=. TODO possibly a small bug due to ssl verification failures, unexplained for now.

The initial system configuration is then simplified and basically comes down to:

#+begin_src sh
guix pull -C /etc/channels.scm
hash guix
#+end_src

The pull operation may take a while depending on how recently the installation USB image has been generated.

Once your channels are set up, you will need to tweak your configuration to reflect the partition UUIDs and labels for the system that you are installing.  To figure out the UUID of your encrypted root partition, you can use the following command:

#+begin_src sh
cryptsetup luksUUID /dev/<root partition>
#+end_src

#+begin_quote

**TIP:** To make it easier to copy the UUID into your config file, you can switch to another tty using =Ctrl-Alt-F4= and press =Enter= to get to another root prompt.  You can then switch back and forth between the previous TTY on =F3=.

#+end_quote

You then need to enter your file-system information in the variable =devices= in =config.scm=, which will premanently store this information. I use the hardware product name as a host-name for later robust configuration. Now you can initialize your system using the following command:

#+begin_src sh
guix system -L ~/.dotfiles/.config/guix/systems init path/to/config.scm /mnt
#+end_src

This could take a while, so make sure your laptop is plugged in and let it run.  If you see any errors during installation, don't fret, you can usually resume from where you left off because your Guix store will have any packages that were already installed.

**** Initial System Setup

Congrats!  You now have a new Guix system installed, reboot now to complete the initial setup of your user account.

The first thing you'll want to do when you land at the login prompt is login as =root= and immediately change the =root= and user passwords using =passwd= (there isn't a root password by default!):

#+begin_src sh

  passwd             # Set passwd for 'root'
  passwd <username>  # Set password for your user account (no angle brackets)

#+end_src

Now log into your user account and clone your dotfiles repository, which is self-contained. Verify that the file-system configuration is accurate and tangle the =config.org= file. It will setup your =channels.scm= file, so you can run =guix pull= to sync in the new channel. You can run =make system= and =make home= to configure your system and home environement according to your RDE configuration.

* Roadmap

** Own configuration

*** TODO Migrate LARBS scripts
delete old and unused scripts, find a way through emacs if possible.

- rehabilitation of all scripts relying on the good functionning of =sudo -A=, which may be broken because of rofi-wayland when calling SUDO_ASKPASS.

*** TODO Shortcut / bookmark management
 One nice way of doing it can be through a bookmarks emacs file.

*** TODO move to GnuPG
erase ssh-keys configuration to move it to gpg.

*** TODO Setup OVH email aliases

*** Emacs

Some later improvements I might add to my rde configuration :
- Would frames-only-mode be somehow useful for rde ?
- need to check for geiser-guile-load-path ? doesn't seem to work that well.
- learn to use and configure eglot
- customize font sizes in org-mode by relying on daviwil's implementation ?
- When possible, allow calendar sync based on daviwil's implementation ?
- Reminders (through org-wild-notifier ?)
- =org-present= when preparing for presentations.
- flycheck only works with eglot, and not clear with which languages they work.
- check all Emacs Development packages (=elgot=, =flycheck=, =python=, =web-mode=)
- add feature for calendar =calfw=


*** Abandoned for now

- pam-gnupg (some things in the git directory, but won't implement it myself).
- web bookmarks. possibly see buku, which has an emacs app. Would really be useful for now. Another alternative would be to copy elfeed-org format.
- system connection-services allowing to keep track of all connections as a part of a pass database, and re-inject them again. may be wortk once there's a guile-gpgme library allowing to parse passwords without being root when launched from cli. see the commit log, the complete service is there.

** Contribute back to RDE

The final goal would be to only rely on rde features.

- [ ] some heavy changes related to keyboards and window manager configuration.
- [-] migrate the most part of the emacs features configuration.
  - [ ] emacs-evil (FIXME lacks modus-vivendi cursor compatibility)
  - [ ] emacs-saving
  - [ ] emacs-elfeed (ready?)
  - [ ] emacs-lispy
  - [ ] emacs-flycheck
  - [ ] emacs-web-mode
  - [ ] emacs-yaml-mode
  - [-] emacs-guix-development (proposed)
  - [ ] emacs-dired-hacks (ready?)
  - [ ] emacs-org-babel
  - [ ] emacs-org-latex
  - [ ] emacs-python
  - [ ] emacs-org-agenda
  - [ ] emacs-eval-in-repl
  - [ ] emacs-origami-el (ready?)

** Changelog
- 2022-09-04: moved from config.org to config.scm for minimalism. Keeping the idea of modularity with pages and modules placed where they are needed. no need to tangle anymore.



* Dotfiles
** Why ?

I discovered system crafting / configuration thanks to [[https://larbs.xyz/][LARBS]] / [[https://archlinux.org/][Archlinux]] and fell into the rabbithole of system configuration, mainly for long-term efficiency reasons. I was happy with Arch, but then had some issues with my computer, and found that portability and reproducibility is quite hard on Arch.

I discovered GNU Guix thanks to David Wilson and started to configure my system, based on [[https://github.com/daviwil/dotfiles][David Wilson's]] and [[https://git.sr.ht/~krevedkokun/dotfiles][krevedkokun's dotfiles]], and on [[https://larbs.xyz/][LARBS' scripts]]. I've finally migrated it under [[https://git.sr.ht/~abcdw/rde][Andrew Tropin's RDE]].

The code relies on hidden data, and won't work if deployed as such. However, the code is mainly written in literate org-babel programming. It allows for clearer distinction between ideas and code, thus facilitating the reading and cherry-picking of snippets.

*** RDE

RDE is a developers and power user friendly GNU/Linux distribution, based on GNU Guix.

**** Principles

More detailed description can be found in the [[https://trop.in/rde/manual#Principles][manual]].
***** Main
- Ergonomic :: Sane keybindings, good contrast, readable fonts.
- Reproducible :: Setup can be easily replicated.
- Hackable :: Easy to throw out or modify any part of setup.
- Stateless :: All state must be explicit and syncable or temporary.
***** Secondary
- Lightweight and battery efficient :: wayland, fast native apps.
- Offline :: most of workflows and apps should work without network.
- Attention-friendly :: minimal use of notification and other
  distractive things.

**** Differences of this config

The code is a direct use of rde's system. Here are the main differences :
- using evil-mode for emacs and sway.
- added a system-connections service to system to also deploy wifi data (unused for now)
- emacs' configuration is quite similar to David Wilson's former dotfiles
- rbw ?
- a whole server configuration, included in dotfiles (cuirass, git, rsync for now).

** Usage

Every useful command is kept in the main =Makefile=.

*** Tangling files
Since I keep all of my important configuration files in Org Mode code blocks, I often have to ensure that the real configuration files are kept up to date.

=make tangle=

*** Syncing

When I want to sync my dotfiles repo into my local clone which likely has uncommitted changes, I run =make udpate=.  This script first makes sure that all Org files are saved in a running Emacs instance and then stashes everything before pulling the latest changes from =origin=.  After pulling, the stash is popped and then the script verifies there are no merge conflicts from the stash before proceeding.  If there are no conflicts, =make tangle= is run, otherwise I'll fix the merge conflicts manually and run =make tangle= myself.

*** Updating home

=make home=

*** Updating system

=make system=

*** Checking for error in tangled files

=make check=

*** If a font package has been updated and causes issues

=make update-fonts=

** System Installation

Here's a guide for how I install my RDE systems on a computer.  This process is extremely simplified. If you need to start from scratch or bootstrap, you might want to take a look at Sytems Crafters wiki on how to do it.

*** Building the Installation Image

You need to create a slightly larger install image to ensure you have enough headroom for temporary file create and "no free space" errors.
The installation image can be built with this command in the ~.dotfiles~ directory:

#+begin_src sh
GUILE_LOAD_PATH=./ RDE_TARGET=live-install guix system image ./config.scm --image-size=7G
#+end_src

*NOTE:* It can take an hour or more for this to complete, so be patient...

Once the build is complete, Guix will print out the path to the disk image file that was created.  You can now write the installation image to a USB stick using =dd=:

#+begin_src sh
sudo dd if=/gnu/store/{sha256}-disk-image of=/dev/sdX bs=1M status=progress
#+end_src

*** Installing Guix

With the newly "burned" installation image, boot from the USB drive and choose "Install using the shell based process."

**** Setting up WiFi

The procedure counselled in the System Crafters wiki is quite a hassle and often fails. This was a reason to get rid of =connman= and use =NetworkManager= in the configuration, even though the former is lighter. Wifi configuration simply becomes :

#+begin_src sh
rfkill unblock all
nmtui
#+end_src

**** Setting Up Partitions

Steps to setup partitions are inspired by the ~etc/install.sh~ script from akagi.

Since we're installing on a ThinkPad with UEFI, follow the [[https://guix.gnu.org/manual/en/guix.html#Disk-Partitioning][instructions in the Guix manual]] for disk partitioning.  The short of it is that you need to use =fdisk= to create a partition in your free space:

#+begin_src sh
fdisk /dev/sda
#+end_src

Once you have your Linux root partition set up, you can make file-systems and enable LUKS to encrypt that partition by running the following commands (=enc= is an arbitrary label but is used in =make btrfs= so respect the label):

#+begin_src sh
mkfs.vfat -F32 /dev/<EFI partition>
mkswap /dev/<SWAP partition>
cryptsetup luksFormat /dev/<root partition>
cryptsetup open --type luks /dev/<root partition> enc
mkfs.btrfs /dev/mapper/enc
#+end_src

The remaining configuration is summarized in the simple script =make btrfs=. This script creates btrfs subvolumes =root=, =boot=, =home=, =store=, =log= and =data=. Once subvolumes are created, it mounts the root filesystem from =enc= device, and then mount all =btrfs= subvolumes.

Finally, make sure to mount your EFI partition to =/mnt/boot= so that the installer can install the bootloader. Make also sure to swapon your swap partition.

#+begin_src sh
mkdir -p /mnt/boot/efi
mount /dev/<EFI partition> /mnt/boot/efi
swapon /dev/<SWAP partition>
#+end_src

Now your EFI and encrypted root filesystems are mounted so you can proceed with system installation. You must now set up the installation environment using =herd=:

#+begin_src sh
herd start cow-store /mnt
#+end_src

**** Initial System Installation

The system configuration and sources are already packaged in the live-image created with =make image=. TODO possibly a small bug due to ssl verification failures, unexplained for now.

The initial system configuration is then simplified and basically comes down to:

#+begin_src sh
guix pull -C /etc/channels.scm
hash guix
#+end_src

The pull operation may take a while depending on how recently the installation USB image has been generated.

Once your channels are set up, you will need to tweak your configuration to reflect the partition UUIDs and labels for the system that you are installing.  To figure out the UUID of your encrypted root partition, you can use the following command:

#+begin_src sh
cryptsetup luksUUID /dev/<root partition>
#+end_src

#+begin_quote

**TIP:** To make it easier to copy the UUID into your config file, you can switch to another tty using =Ctrl-Alt-F4= and press =Enter= to get to another root prompt.  You can then switch back and forth between the previous TTY on =F3=.

#+end_quote

Now you can initialize your system using the following command:

#+begin_src sh
guix system -L ~/.dotfiles/.config/guix/systems init path/to/config.scm /mnt
#+end_src

This could take a while, so make sure your laptop is plugged in and let it run.  If you see any errors during installation, don't fret, you can usually resume from where you left off because your Guix store will have any packages that were already installed.

**** Initial System Setup

Congrats!  You now have a new Guix system installed, reboot now to complete the initial setup of your user account.

The first thing you'll want to do when you land at the login prompt is login as =root= and immediately change the =root= and user passwords using =passwd= (there isn't a root password by default!):

#+begin_src sh

  passwd             # Set passwd for 'root'
  passwd <username>  # Set password for your user account (no angle brackets)

#+end_src

Now log into your user account and clone your dotfiles repository, which is self-contained. Verify that the file-system configuration is accurate and tangle the =config.org= file. It will setup your =channels.scm= file, so you can run =guix pull= to sync in the new channel. You can run =make system= and =make home= to configure your system and home environement according to your RDE configuration.

* Roadmap

** Own configuration

- [ ] need to find a way to centralize shortcuts management.
- [ ] moving to GnuPG : erase ssh-keys configuration to move it to gpg.
- [ ] migrate old and useful LARBS scripts (so they work on the system) / delete others.
- [ ] pam-gnupg works but starts the gpg-agent before shepherd. need to write a
  pam_shepherd module to pick the pwd directly from login ?

** Contribute back to RDE

The final goal would be to only rely on rde features.

- [ ] some heavy changes related to keyboards and window manager configuration.
- [-] migrate the most part of the emacs features configuration.
  - [ ] emacs-evil (FIXME lacks modus-vivendi cursor compatibility)
  - [ ] emacs-ux (clarify where)
  - [ ] emacs-elfeed (ready?)
  - [ ] emacs-deft (ready?)
  - [ ] emacs-lispy
  - [ ] emacs-flycheck
  - [ ] emacs-web-mode
  - [ ] emacs-yaml-mode
  - [-] emacs-guix-development (proposed)
  - [ ] emacs-dired-hacks (ready?)
  - [ ] emacs-org-babel
  - [ ] emacs-org-latex
  - [ ] emacs-python
  - [ ] emacs-my-org-agenda
  - [-] emacs-my-org-roam (waiting for org-roam-ui package to be merged upstream)
  - [ ] emacs-citar
  - [ ] emacs-eval-in-repl
  - [ ] emacs-origami-el (ready?)

#+TITLE: Org Mode Workflow
#+PROPERTY: header-args:emacs-lisp :tangle ./emacs/workflow.el

This file contains the description and configuration of the productivity workflow I use with Org Mode.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#principles][Principles]]
  - [[#dont-look-at-org-files-to-find-the-next-task-use-the-agenda-view][Don't look at Org files to find the next task, use the agenda view]]
  - [[#ensure-sufficient-metadata-on-tasks-for-effective-filtering][Ensure sufficient metadata on tasks for effective filtering]]
  - [[#keep-a-daily-log-of-work-being-done][Keep a daily log of work being done]]
  - [[#future-ideas-and-objectives][Future ideas and objectives]]
    - [[#learning-panel-][Learning panel ?]]
    - [[#manage-proper-clocking][Manage proper clocking]]
    - [[#email-integration][Email integration]]
    - [[#block-time-properly-on-25-minutes-blocks--5-min-break][Block time properly on 25 minutes blocks + 5 min break]]
    - [[#objective--set-a-goal-on-how-organized-should-you-be-in-beginning-of-january][Objective : set a goal on how organized should you be in beginning of January.]]
- [[#tasks][Tasks]]
  - [[#figure-out-how-to-refile-tasks-to-an-org-capture-target][Figure out how to refile tasks to an org-capture target]]
- [[#file-paths][File Paths]]
- [[#workflow-states][Workflow States]]
- [[#tags][Tags]]
- [[#agendas][Agendas]]
- [[#clocking][Clocking]]
- [[#capture-templates][Capture Templates]]
:END:

* Principles

** Don't look at Org files to find the next task, use the agenda view
** Ensure sufficient metadata on tasks for effective filtering
** Keep a daily log of work being done
** Future ideas and objectives
*** Learning panel ?
- I should use org-roam to synthetize information and org-drill in order to batch learn things easily. Maybe also having a learning.org and a learning tab is good practice in order to planify more clearly how I intend to learn things.

*** Manage proper clocking
I have read the corresponding man page quickly, seems pretty simple, but how is the information used after that ?
*** Email integration
- haven't tested how this integration works for now, maybe as simple as an org-capture.
- Workfkow : mail inbox --> inbox.org --> review every evening ?
- have read a blog post claiming that emacs wasn't necessarily good with a lot of big extensions (mu4e, elfeed), mail ?
*** Block time properly on 25 minutes blocks + 5 min break
- Maybe inquire into the pomodoro technique ?
  Or maybe it's just good straightforward when properly done ?
*** Objective : set a goal on how organized should you be in beginning of January.
* Tasks

Here are some things I need to do to make this workflow even more effective:

** TODO Figure out how to refile tasks to an org-capture target
I want to put them in the "Completed Tasks" entry of that day

* File Paths

The location where my =Notes= folder lives changes in some cases

#+begin_src emacs-lisp

  ;; -*- lexical-binding: t; -*-

  (setq org-directory (concat (getenv "HOME") "/org"))
  (setq org-agenda-files `(,org-directory))
  (defun ng/org-path (path)
    (expand-file-name path org-directory))

  (setq org-default-notes-file (ng/org-path "inbox.org"))

  (with-eval-after-load 'org-roam
    (defun my/org-roam-project-finalize-hook ()
      "Adds the captured project file to `org-agenda-files' if the
  capture was not aborted."
      ;; Remove the hook since it was added temporarily
      (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

      ;; Add project file to the agenda list if the capture was confirmed
      (unless org-note-abort
        (with-current-buffer (org-capture-get :buffer)
          (add-to-list 'org-agenda-files (buffer-file-name)))))

    (defun my/org-roam-find-project ()
      (interactive)
      ;; Add the project file to the agenda after capture is finished
      (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

      ;; Select a project file to open, creating it if necessary
      (org-roam-node-find
       nil
       nil
       (my/org-roam-filter-by-tag "Project")
       :templates
       '(("p" "project" plain "* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
          :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
          :unnarrowed t))))

    (defun my/org-roam-capture-inbox ()
      (interactive)
      (org-roam-capture- :node (org-roam-node-create)
                         :templates '(("i" "inbox" plain "* %?"
                                       :if-new (file+head "inbox.org" "#+title: Inbox\n")))))

    (defun my/org-roam-copy-todo-to-today ()
      (interactive)
      (let ((org-refile-keep t) ;; Set this to nil to delete the original!
            (org-roam-dailies-capture-templates
             '(("t" "tasks" entry "%?"
                :if-new (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
            (org-after-refile-insert-hook #'save-buffer)
            today-file
            pos)
        (save-window-excursion
          (org-roam-dailies--capture (current-time) t)
          (setq today-file (buffer-file-name))
          (setq pos (point)))

        ;; Only refile if the target file is different than the current file
        (unless (equal (file-truename today-file)
                       (file-truename (buffer-file-name)))
          (org-refile nil nil (list "Tasks" today-file nil pos)))))

    ;; (add-to-list 'org-after-todo-state-change-hook
    ;;              (lambda ()
    ;;                (when (equal org-state "DONE")
    ;;                  (my/org-roam-copy-todo-to-today))))
    )

#+end_src

* Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily:

- =TODO= - A task that should be done at some point
- =NEXT= - This task should be done next (in the Getting Things Done sense) Beware !
- =WAIT= - Waiting for someone else to be actionable again
- =BACK= - A task in the backlog to be done some day but not now
- =DONE= - It's done!

I also make sure to set them up in the order I want =org-sort-entries= to sort them in when I use the =o= option upon invoking that command.

#+begin_src emacs-lisp

        (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "|" "LEAD(l)" "FLOW(f)")
            (sequence "|" "ORGZ(o)" "WAIT(w)" "BACK(b)")))

        (setq org-todo-keyword-faces
          '(("NEXT" . (:foreground "orange red" :weight bold))
            ("WAIT" . (:foreground "HotPink2" :weight bold))
            ("BACK" . (:foreground "MediumPurple3" :weight bold))))

#+end_src

* Tags

Tags are used to filter all tasks to find anything actionable in a particular context.  I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =manage= - I'm the person responsible for setting the rythm for this task. People rely on you, it should be prioritized above others.
- =organize= - This task should in some time help to complete other tasks (faster or simply the case). To prioritize  over unproductive tasks.
- =followup= - Someone is waiting on me to follow up or give feedback on this task, it should be prioritized above others
- =batch= - The task can be batched with others (low effort)

#+begin_src emacs-lisp

  ;; Configure common tags
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)
       ("@home" . ?H)
       ("@work" . ?W)
       ("batch" . ?b)
       ("manage" . ?m)
       ("organize" . ?o)
       ("followup" . ?f)))

#+end_src

* Agendas

#+begin_src emacs-lisp

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-span 'day)
  (setq org-agenda-start-with-log-mode t)

  ;; Make done tasks show up in the agenda log
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-columns-default-format "%20CATEGORY(Category) %65ITEM(Task) %TODO %6Effort(Estim){:}  %6CLOCKSUM(Clock) %TAGS")

  (setq org-agenda-custom-commands
        `(("d" "Dashboard"
           ((agenda "" ((org-deadline-warning-days 7)))
            (tags-todo "+PRIORITY=\"A\""
                       ((org-agenda-overriding-header "High Priority")))
            (tags-todo "+manage" ((org-agenda-overriding-header "Be a good manager")))
            (tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Actions")
                   (org-agenda-max-todos nil)))
            (tags-todo "+organize" ((org-agenda-overriding-header "Organize even better")))
            ))

          ("n" "Next Tasks"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "NEXT"
                  ((org-agenda-overriding-header "Next Tasks")))))

          ("r" "Review"
           ((agenda "" ((org-deadline-warning-days 7)))
            (todo "TODO"
                  ((org-agenda-overriding-header "Unprocessed Inbox Tasks")
                   (org-agenda-files '(,(ng/org-path "inbox.org")))
                   (org-agenda-text-search-extra-files nil)))
            (todo "WAIT"
                  ((org-agenda-overriding-header "Tasks waiting for someone else")))
            (tags-todo  "+TODO=\"NEXT\"+Effort>15"
              ((org-agenda-overriding-header "All untaggued TODO tasks")
               (org-agenda-max-todos 20)))
            (todo "BACK"
                  ((org-agenda-overriding-header "Tasks on backlog -- soon welcome !")))))

          ;; Low-effort next actions
          ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
           ((org-agenda-overriding-header "Low Effort / Batchable Tasks")
            (org-agenda-max-todos 20)
            (org-agenda-files org-agenda-files)))))

#+end_src

* Clocking

I like to use =org-timer-set-timer= to set a countdown timer for a task based on the "effort" value I set on it.  Since Org doesn't seem to automatically clock the task when I set a timer, this hook will take care of that.

#+begin_src emacs-lisp

  (add-hook 'org-timer-set-hook #'org-clock-in)

#+end_src

* Capture Templates

#+begin_src emacs-lisp

  (defun ng/get-todays-journal-file-name ()
    "Gets the journal file name for today's date"
    (interactive)
    (let* ((journal-file-name
             (expand-file-name
               (format-time-string "%Y/%Y-%2m-%B.org")
               (ng/org-path "Journal/")))
           (journal-year-dir (file-name-directory journal-file-name)))
      (if (not (file-directory-p journal-year-dir))
        (make-directory journal-year-dir))
      journal-file-name))


  (defun ng/on-org-capture ()
    ;; Don't show the confirmation header text
    (setq header-line-format nil)

    ;; Control how some buffers are handled
    (let ((template (org-capture-get :key t)))
      (pcase template
        ("jj" (delete-other-windows)))))

  (add-hook 'org-capture-mode-hook 'ng/on-org-capture)

  (setq org-capture-templates
    `(("t" "Tasks")
      ("tt" "Task" entry (file ,(ng/org-path "inbox.org"))
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)
      ("ts" "Clocked Entry Subtask" entry (clock)
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("je" "General Entry" entry
           (file+olp+datetree ,(ng/org-path "Journal.org"))
           "\n* %<%I:%M %p> - %^{Title} \n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jt" "Task Entry" entry
           (file+olp+datetree ,(ng/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Task Notes: %a\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)
      ("jj" "Journal" entry
           (file+olp+datetree ,(ng/org-path "Journal.org"))
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           :tree-type week
           :clock-in :clock-resume
           :empty-lines 1)))

#+end_src

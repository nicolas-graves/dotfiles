

* Principles

Inspiré des scripts de Luke Smith.
L'idée est simplement à partir d'une structure simple de raccourcis d'avoir accès beaucoup plus facilement aux raccourcis utilisés dans les différentes applications, à savoir :
- des raccourcis shell
- bemenu / le menu dynamique
- ivy dans emacs (plutôt passer par les bookmarks et corriger)

Correction / apport pour Emacs : en fait il y a la fonction des bookmarks qui y colle parfaitement bien. Il y a un format de fichier importable qui peut parfaitement faire l'affaire.

* Structures de données

** Dossiers

#+begin_src bash

  cac ${XDG_CACHE_HOME:-$HOME/.cache}
  cf  ${XDG_CONFIG_HOME:-$HOME/.config}
  D   ${XDG_DOWNLOAD_DIR:-$HOME/tels}
  d   ${XDG_DOCUMENTS_DIR}
  dt  ${XDG_DATA_HOME:-$HOME/.local/share}
  rr  ${XDG_DATA_HOME:-$HOME/.local/src}
  h   $HOME
  m   ${XDG_MUSIC_DIR:-$HOME/music}
  mn  /mnt
  pp  ${XDG_PICTURES_DIR:-$HOME/images}
  sc  $HOME/.local/bin
  src $HOME/.local/src
  vv  ${XDG_VIDEOS_DIR:-$HOME/videos}
  site $HOME/areas/pre/admin_dev/site_pre/manifesto
  diary $HOME/archives/journal

#+end_src

#+begin_src elisp

  (define dirs-shortcuts
    (list
    '(cac . "${XDG_CACHE_HOME:-$HOME/.cache}")
    '(cf . "${XDG_CONFIG_HOME:-$HOME/.config}")
    '(D . "${XDG_DOWNLOAD_DIR:-$HOME/tmp}")
    '(d . "${XDG_DOCUMENTS_DIR}")
    '(dt . "${XDG_DATA_HOME:-$HOME/.local/share}")
    '(rr . "${XDG_DATA_HOME:-$HOME/.local/src}")
    '(h . "$HOME")
    '(m . "${XDG_MUSIC_DIR:-$HOME/music}")
    '(mn . "/mnt")
    '(pp . "${XDG_PICTURES_DIR:-$HOME/images}")
    '(sc . "$HOME/.local/bin")
    '(src . "$HOME/.local/src")
    '(vv . "${XDG_VIDEOS_DIR:-$HOME/videos}")
    '(site . "$HOME/docs/pre/admin_dev/site_pre/manifesto")
    '(diary . "$HOME/archives/journal")
  ))

#+end_src

** Fichiers

#+begin_src bash

  # keys	filename				description
  bf	${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-files	# This file, a list of bookmarked files
  bd	${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs		# A list of bookmarked directories similar to this file
  cfx	${XDG_CONFIG_HOME:-$HOME/.config}/x11/xresources	# Colors, themes and variables for X11
  cfb	~/.local/src/dwmblocks/config.h				# dwmblocks: the status bar for dwm


  # These do not update automatically, but on the next new instance of a program:

  cfv	${XDG_CONFIG_HOME:-$HOME/.config}/nvim/init.vim		# vim/neovim config
  cfz	$ZDOTDIR/.zshrc						# zsh (shell) config
  cfa	${XDG_CONFIG_HOME:-$HOME/.config}/shell/aliasrc		# aliases used by zsh (and potentially other shells)
  cfp	${XDG_CONFIG_HOME:-$HOME/.config}/shell/profile		# profile file for login settings for zsh
  cfm	${XDG_CONFIG_HOME:-$HOME/.config}/mutt/muttrc		# mutt (email client) config
  cfn	${XDG_CONFIG_HOME:-$HOME/.config}/newsboat/config	# newsboat (RSS reader)
  cfu	${XDG_CONFIG_HOME:-$HOME/.config}/newsboat/urls		# RSS urls for newsboat
  cfmb	${XDG_CONFIG_HOME:-$HOME/.config}/ncmpcpp/bindings	# ncmpcpp (music player) keybinds file
  cfmc	${XDG_CONFIG_HOME:-$HOME/.config}/ncmpcpp/config	# ncmpcpp (music player) config
  cfl	${XDG_CONFIG_HOME:-$HOME/.config}/lf/lfrc		# lf (file browser) config
  cfL	${XDG_CONFIG_HOME:-$HOME/.config}/lf/scope		# lf's scope/preview file
  cfX	${XDG_CONFIG_HOME:-$HOME/.config}/sxiv/exec/key-handler	# sxiv (image viewer) key/script handler

#+end_src

#+begin_src elisp

à reprendre
  (define dotfiles-shortcuts
    (list
      "fn" '((lambda () (interactive) (counsel-find-file "/")) :which-key "notes")
      "fd"  '(:ignore t :which-key "dotfiles")
      "fdf" '((lambda () (interactive) (counsel-find-file "~/.dotfiles/home/yggdrasil/")) :which-key "dotfiles")
      "fdc" '((lambda () (interactive) (counsel-find-file "~/.dotfiles/home/yggdrasil/files/config")) :which-key "config")
      "fds" '((lambda () (interactive) (counsel-find-file "~/.dotfiles/system/")) :which-key "system")
      "fde" '((lambda () (interactive) (find-file (expand-file-name "~/.dotfiles/home/yggdrasil/files/config/emacs/Emacs.org"))) :which-key "emacs")
      "fdE" '((lambda () (interactive) (ng/org-file-show-headings "~/.dotfiles/home/yggdrasil/files/config/emacs/Emacs.org")) :which-key "emacs headings")
      "fdm" '((lambda () (interactive) (find-file "~/.dotfiles/home/yggdrasil/files/config/emacs/Mail.org")) :which-key "mail")
      "fdw" '((lambda () (interactive) (find-file "~/.dotfiles/home/yggdrasil/files/config/emacs/Workflow.org")) :which-key "workflow")
      ;;"fdp" '((lambda () (interactive) (ng/org-file-jump-to-heading "~/.dotfiles/Desktop.org" "Panel via Polybar")) :which-key "polybar")
     ))


   (define org-shortcuts
     (list
    "o"   '(:ignore t :which-key "org mode")

    "oi"  '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")

    "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

    "os"  '(ng/counsel-rg-org-files :which-key "search notes")

    "oa"  '(org-agenda :which-key "status")
    "ot"  '(org-todo-list :which-key "todos")
    "oc"  '(org-capture t :which-key "capture")
    "ox"  '(org-export-dispatch t :which-key "export")
    "fof" '((lambda () (interactive) (counsel-find-file "~/docs/org/")) :which-key "org")
    "fi" '((lambda () (interactive) (counsel-find-file "~/docs/org/inbox.org")) :which-key "inbox.org")
    "foa" '((lambda () (interactive) (counsel-find-file "~/docs/org/activism.org")) :which-key "activism")
    "foA" '((lambda () (interactive) (ng/org-file-show-headings "~/docs/org/activism.org")) :which-key "edit activism")
    "fol" '((lambda () (interactive) (counsel-find-file "~/docs/org/life.org")) :which-key "life")
    "fos" '((lambda () (interactive) (counsel-find-file "~/docs/org/school.org")) :which-key "school")
    "foi" '((lambda () (interactive) (counsel-find-file "~/docs/org/info.org")) :which-key "informatique")
    "fop" '((lambda () (interactive) (counsel-find-file "~/docs/org/piaulage.org")) :which-key "piaulage")
    ))

#+end_src

* Scripts

#+begin_src bash

    !/bin/sh

    bmdirs="${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs"
    bmfiles="${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-files"

    # Output locations. Unactivated progs should go to /dev/null.
    shell_shortcuts="${XDG_CONFIG_HOME:-$HOME/.config}/shell/shortcutrc"
    zsh_named_dirs="${XDG_CONFIG_HOME:-$HOME/.config}/shell/zshnameddirrc"

    # Remove, prepare files
    rm -f "$zsh_named_dirs" 2>/dev/null
    printf "# vim: filetype=sh\\nalias " > "$shell_shortcuts"

    # Format the `directories` file in the correct syntax and sent it to all three configs.
    eval "echo \"$(cat "$bmdirs")\"" | \
    awk "!/^\s*#/ && !/^\s*\$/ {gsub(\"\\\s*#.*$\",\"\");
      printf(\"%s=\42cd %s && ls -a\42 \\\\\n\",\$1,\$2)   >> \"$shell_shortcuts\" ;
      printf(\"hash -d %s=%s \n\",\$1,\$2)                 >> \"$zsh_named_dirs\" }"

    # Format the `files` file in the correct syntax and sent it to both configs.
    eval "echo \"$(cat "$bmfiles")\"" | \
    awk "!/^\s*#/ && !/^\s*\$/ {gsub(\"\\\s*#.*$\",\"\");
      printf(\"%s=\42\$EDITOR %s\42 \\\\\n\",\$1,\$2)  >> \"$shell_shortcuts\" ;
      printf(\"hash -d %s=%s \n\",\$1,\$2)             >> \"$zsh_named_dirs\" }"

#+end_src

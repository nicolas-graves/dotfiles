# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: Guix Configuration with rde
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

This is an ongoing evolution of my Guix configuration using rde project.

* System
** Channels

Guix supports the concept of [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]] which contain Guix package definitions that can be installed on your machine.  Aside from the =%default-channels= list, I also use the [[https://gitlab.com/nonguix/nonguix][Nonguix]] channel to install packages that aren't included with Guix by default like the non-free Linux kernel. I generate my real =.config/guix/channels.scm= file based on this snippets.

*Channel commits*
=freeze= keyword is necessary until better lookup-commits function.
#+NAME: channel-commits
#+begin_src emacs-lisp
'((base .
   ((freeze      . nil)
    (nonguix     . "674d04a5fbd8689ab5ff27271a656f711fc77c54")
    (rde         . "051e0f77aef5610d1e74745cf9e2303b034462c3")
    (guix-url    . "https://git.savannah.gnu.org/git/guix.git")
    (guix        . "8f0d45ccac3f6cee69eba8de5e4ae5e5555f1a3d")))
  (Precision-3571 .
   ((freeze      . nil))))
#+end_src

#+NAME: lookup-commits
#+begin_src emacs-lisp :var data=channel-commits var="a var name"
(let* ((subtree (assoc (intern system-name) data))
       (change-url (cdr (assoc 'guix-url subtree)))
       (try-it (or (cdr (assoc 'freeze subtree))
                   (cdr (assoc 'freeze (assoc 'base data))))))
  (if (equal var 'guix-url)
    (if (stringp change-url)
        `(url ,change-url)
        `(url ,(cdr (assoc 'guix-url (assoc 'base data)))))
    (if try-it
      (let* ((try-system-name-commit
               (cdr (assoc var (assoc (intern system-name) data)))))
        (if (stringp try-system-name-commit)
          `(commit ,try-system-name-commit)
          `(commit ,(cdr (assoc var (assoc 'base data))))))
      "")))
#+end_src

#+RESULTS: lookup-commits

*.config/guix/channels.scm:*

#+begin_src scheme :tangle ".guix-channel" :noweb yes
(channel
  (version 0)
  (url "/home/graves/.dotfiles/")
  (dependencies
    (channel
      (name nonguix)
      (url "https://gitlab.com/nonguix/nonguix")
      <<lookup-commits(var='nonguix)>>
      (introduction
        (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
            "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
    (channel
      (name rde)
      (url "https://git.sr.ht/~abcdw/rde")
      <<lookup-commits(var='rde)>>
      (introduction
        (make-channel-introduction
          "257cebd587b66e4d865b3537a9a88cccd7107c95"
          (openpgp-fingerprint
            "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
    (channel
      (name guix)
      <<lookup-commits(var='guix-url)>>
      <<lookup-commits(var='guix)>>
      (introduction
        (make-channel-introduction
          "9edb3f66fd807b096b48283debdcddccfea34bad"
          (openpgp-fingerprint
            "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))))
#+end_src

The file pulling channes is only pulling this channel, which has proper dependencies set.

#+begin_src scheme :tangle "~/.config/guix/channels.scm"
;; (use-modules (guix ci)
;;              (guix channels))

(list
 (channel
  (name 'dotfiles)
  (branch "main")
  (url "/home/graves/.dotfiles/"))
 ;; (channel-with-substitutes-available
  ;; %default-guix-channel
  ;; "https://ci.guix.gnu.org")
  )
#+end_src

** File Systems

Each computer has its own file system. The small snippet =lookup= allows to use a simple ~alist~ for storing file system information.

*Devices*
#+NAME: devices
#+begin_src emacs-lisp
'((Precision-3571 .
   ((efi         . /dev/nvme0n1p1)
    (swap        . /dev/nvme0n1p2)
    (uuid-mapped . 86106e76-c07f-441a-a515-06559c617065)))
  (20AMS6GD00 .
   ((efi         . /dev/sda1)
    (swap        . /dev/sda2)
    (uuid-mapped . a9319ee9-f216-4cad-bfa5-99a24a576562))))
#+end_src

#+NAME: lookup
#+begin_src emacs-lisp :var data=devices var="a var name"
; get the value of device-type var
(cdr (assoc var
            ; in sub-alist with the right system-name
        (assoc (intern system-name) data)))
#+end_src

*File systems*
#+begin_src scheme :noweb-ref host-features :noweb yes

;;; Hardware/host specifis features

;; TODO: Switch from UUIDs to partition labels For better
;; reproducibilty and easier setup.  Grub doesn't support luks2 yet.

(define %swap-device
  (swap-space (target "<<lookup(var='swap)>>")))

(define %mapped-device
  (mapped-device
    (source (uuid "<<lookup(var='uuid-mapped)>>"))
    (targets (list "enc"))
    (type luks-device-mapping)))

(define file-systems
  (append
   (map (match-lambda
	  ((subvol . mount-point)
	   (file-system
	     (type "btrfs")
	     ;;(device (file-system-label "enc"))
	     (device "/dev/mapper/enc")
	     (mount-point mount-point)
	     (options (format #f "autodefrag,compress=zstd,ssd_spread,space_cache=v2,subvol=~a" subvol))
	     (dependencies (list %mapped-device))
	     )))
	'((root . "/")
	  (store  . "/gnu/store")
	  (home . "/home")
	  (data . "/data")
	  (boot . "/boot")
	  (log  . "/var/log")))
   (list (file-system
           (mount-point "/boot/efi")
           (type "vfat")
           (device "<<lookup(var='efi)>>"))))
  )
#+end_src

** Host Features

*Guile modules*
#+begin_src scheme :noweb-ref system-modules :noweb-sep "\n"
  #:use-module (gnu system)
  #:use-module (gnu system file-systems)
  #:use-module (gnu system mapped-devices)
  #:use-module (gnu system linux-initrd)
  #:use-module (nongnu system linux-initrd)
  #:use-module (nongnu packages linux)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 rdelim)
#+end_src

*Host features*
#+begin_src scheme :noweb-ref host-features

;;; Hardware/host specifis features

;; TODO: Switch from UUIDs to partition labels For better
;; reproducibilty and easier setup.  Grub doesn't support luks2 yet.

(define product-name
  (call-with-input-file "/sys/devices/virtual/dmi/id/product_name"
    (lambda (port) (read-line port))))

(define %host-features
  (list
   (feature-host-info
    #:host-name product-name
    #:timezone  "Europe/Paris")
   ;;; Allows to declare specific bootloader configuration,
   ;;; grub-efi-bootloader used by default
   ;; (feature-bootloader)
   (feature-file-systems
    #:mapped-devices (list %mapped-device)
    #:swap-devices (list %swap-device)
    #:file-systems  file-systems)
   (feature-kernel
    #:kernel linux
    #:initrd microcode-initrd
    #:initrd-modules (append (list "vmd") %base-initrd-modules)
    #:kernel-arguments
    (append (list "quiet" "rootfstype=btrfs") %default-kernel-arguments)
    #:firmware (list linux-firmware))
   (feature-hidpi)))

#+end_src

** Live OS / USB Installation Image

To install Guix on another machine, you first to build need a USB image. Since I use laptops that require non-free components, I have to build a custom installation image with the full Linux kernel. I also include a few other programs that are useful for the installation process. I adapted this image from [[https://gitlab.com/nonguix/nonguix/blob/master/nongnu/system/install.scm][one found on the Nonguix repository]], hence the copyright header.

*./usb-install.scm:*

#+begin_src scheme :tangle ./usb-install.scm :noweb yes
(define-module (usb-install)
  #:use-module (rde features)
  #:use-module (rde features base)
<<system-modules>>
<<user-features-modules>>
  #:use-module (rde features keyboard)
  #:use-module (rde features system)
  #:use-module (rde features fontutils)
  #:use-module (rde features terminals)
  #:use-module (rde features shells)
  #:use-module (rde features shellutils)
  #:use-module (rde features networking)
  #:use-module (rde packages)
  #:use-module (srfi srfi-26)
  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services shepherd)
  #:use-module (gnu system keyboard)
  #:use-module (gnu packages)
  #:use-module (gnu system install)
  #:use-module (gnu system accounts)
  #:use-module (gnu system shadow)
  #:use-module (gnu packages)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages fonts)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages rust-apps)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages base)
  #:use-module (gnu packages bootloaders)
  #:use-module (gnu packages certs)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages fontutils)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages file-systems)
  #:use-module (guix gexp)
  #:use-module (guix inferior)
  #:use-module (guix channels)
  #:use-module (guix modules)
  #:use-module (ice-9 match)
  #:use-module (nongnu packages linux)
  #:use-module ((system desktop) #:prefix desktop:)
  ;;#:use-module ((system connections) #:prefix connections:)
)

(define imported:%installation-services
  (@@ (gnu system install) %installation-services))

(use-modules (gnu system file-systems))
(define-public live-file-systems
  (list (file-system
           (mount-point "/")
           (device (file-system-label "Guix_image"))
           (type "ext4"))
         (file-system
           (mount-point "/tmp")
           (device "none")
           (type "tmpfs")
           (check? #f))))

;;; User features are used for both live-os and usb-image.
<<user-features>>

(use-modules (gnu services))
(define-public live-install
  (rde-config
   (features
    (append
     %user-features
     (list
      ;; (feature-host-info
       ;; #:host-name "gnu"
       ;; #:timezone  "Europe/Paris")
      (feature-file-systems
       #:file-systems
       ;; (append
        live-file-systems
         ;; (list %pseudo-terminal-file-system
               ;; %shared-memory-file-system
               ;; %efivars-file-system
               ;; %immutable-store))
        )
      (feature-kernel
       #:kernel linux
       #:firmware (list linux-firmware))
      (feature-base-packages
       #:system-packages
       (append
        (list
         ripgrep vim git
         exfat-utils fuse-exfat ntfs-3g
         zip unzip
         network-manager
         emacs-no-x-toolkit
         curl htop gnu-make
         glibc         ; for 'tzselect' & co.
         fontconfig
         font-dejavu font-gnu-unifont
         grub          ; mostly so xrefs to its manual work
         nss-certs)    ; To access HTTPS, use git, etc.
        %base-packages-disk-utilities
        %base-packages))
      (feature-base-services
       #:guix-substitute-urls
       (cons*
        "https://substitutes.nonguix.org"
        ;; (string-append "https://" (getenv "URI_service_substitutes"))
        %default-substitute-urls)
       #:guix-authorized-keys
       (cons*
        (local-file "./keys/nonguix.pub")
        (local-file "./keys/my-substitutes-key.pub")
        %default-authorized-guix-keys)
       #:base-services
       (let* ((path "/share/consolefonts/ter-132n")
              (font #~(string-append #$font-terminus #$path))
              (ttys '("tty1" "tty2" "tty3" "tty4" "tty5" "tty6")))
         (append
          (list
           (simple-service
            'channels-and-sources
            etc-service-type
            `(("channels.scm" ,(local-file "../.config/guix/channels.scm"))
              ("guix-sources" ,(local-file "../.local/src/guix"
                                           #:recursive? #t))
              ("rde-sources" ,(local-file "../.local/src/rde"
                                          #:recursive? #t)))))
          (modify-services (imported:%installation-services)
            (console-font-service-type
             config =>
             (map (cut cons <> font) ttys))
            )))))))))

(define-public live-usb
  (rde-config-operating-system live-install))

#+end_src

#+begin_src scheme :noweb-ref live-os
(use-modules (gnu services))
(define-public live-config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     (list
      ;; (feature-host-info
       ;; #:host-name "gnu"
       ;; #:timezone  "Europe/Paris")

      (feature-file-systems
       #:file-systems live-file-systems)
      (feature-kernel
       #:kernel linux
       #:firmware (list linux-firmware))
      (feature-hidpi)
      (feature-custom-services
       #:feature-name-prefix 'live
       #:system-services
       (list
        (simple-service
         'channels-and-sources
         etc-service-type
         `(("channels.scm" ,(local-file "../.config/guix/channels.scm"))
           ("guix-sources" ,(local-file "../.local/src/guix"
                                        #:recursive? #t))
           ("rde-sources" ,(local-file "../.local/src/rde"
                                       #:recursive? #t))))
        (service
         gc-root-service-type
         (list %he))
        )))))))

(define-public live-os
  (rde-config-operating-system live-config))

#+end_src

*Guile modules*

#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
  #:use-module (usb-install)
#+end_src

** System connections

This section was supposed to deal with the save and maintenance of all wifi data. Not currently maintained nor integrated to rde.

First defining functions that allow the treatment of system connections.

#+begin_src scheme :tangle no
;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.
(define-module (system connections-utils)
  #:use-module (ice-9 match)
  #:use-module (ice-9 format)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-9)
  #:use-module (srfi srfi-11)
  #:use-module (srfi srfi-26)
  #:use-module (gnu home services)
  #:use-module (gnu home-services-utils)
  #:use-module (gnu services)
  #:use-module (gnu services shepherd)
  #:use-module (gnu services configuration)
  #:use-module (gnu packages gnome)
  #:use-module (guix packages)
  #:use-module (guix gexp)
  #:use-module (guix monads)
  #:use-module (guix modules)
  #:use-module (guix build utils)
  #:use-module (guix utils)
  #:use-module (guix records)
  #:use-module ((guix import utils) #:select (flatten))
  #:export (system-connections-configuration
            system-connections-extension
            system-connections-service-type
            serialize-system-connections-config))

(define (serialize-connection-section-header name value)
  (format #f "[~a~a]\n" (uglify-field-name name)
	  (if value (format #f " \"~a\"" value) "")))

(define serialize-connection-section
  (match-lambda
    ((name options)
     (cons
      (serialize-connection-section-header name #f)
      (serialize-alist #f options)))
    ((name value options)
     (cons
      (serialize-connection-section-header name value)
      (serialize-alist #f options)))))

(define (serialize-connection-config field-name val)
  #~(string-append #$@(append-map serialize-connection-section val)))

(define connection-config? list?)

(define-configuration system-connection-extension
  (config
   (connection-config '())
   "List of system connections sections.  The same format as in
@code{home-git-configuration}."))

(define-configuration system-connections-configuration
  (package
   (package network-manager)
   "The NetworkManager package to use.")
  (config
   (connection-config '())
   "List of sections and corresponding options.  Something like this:

@lisp
`((sendmail
   ((annotate . #t))))
@end lisp

will turn into this:

@example
[sendmail]
annotate=true
@end example")
  (config-extra-content
   (string-or-gexp "")
   "String or value of string-valued g-exps will be added to the end
of the configuration file."))

(define (add-connections-configuration config)

  (define (serialize-boolean val)
    (if val "true" "false"))

  (define (serialize-val val)
    (cond
     ((list? val) (serialize-list val))
     ((boolean? val) (serialize-boolean val))
     ((or (number? val) (symbol? val)) (list (maybe-object->string val)))
     (else (list val))))

  (define (serialize-field key val)
    (let ((val (serialize-val val))
          (key (symbol->string key)))
      `(,key "=" ,@val "\n")))

  (let ((connection-config
         (map car (map cdr (system-connections-configuration-config config)))))
    (map
     (lambda (con)
       (let ((name (cdr (car (car (cdr (car con)))))))
         `(,(string-append "/etc/NetworkManager/system-connections.ln/"
                           (string-delete #\space name) ".nmconnection")
           ,(apply mixed-text-file
                   (string-delete #\space name)
                   (flatten (generic-serialize-ini-config
                             #:combine-ini interpose
                             #:combine-alist list
                             #:combine-section-alist cons*
                             #:serialize-field serialize-field
                             #:fields con))))))
     connection-config)))

  ;; (let ((connection-config
  ;;        (map car (map cdr (system-connections-configuration-config config)))))
  ;;   `(("NetworkManager"
  ;;      ,(file-union
  ;;        "system-connections.ln"
  ;;        (map
  ;;         (lambda (con)
  ;;           (let ((name (cdr (car (car (cdr (car con)))))))
  ;;             `(,(string-append "system-connections.ln/"
  ;;                               (string-delete #\space name) ".nmconnection")
  ;;               ,(apply mixed-text-file
  ;;                       (string-delete #\space name)
  ;;                       (flatten (generic-serialize-ini-config
  ;;                                 #:combine-ini interpose
  ;;                                 #:combine-alist list
  ;;                                 #:combine-section-alist cons*
  ;;                                 #:serialize-field serialize-field
  ;;                                 #:fields con))))))
  ;;         connection-config)))))
  ;; )

(define (add-system-connection-packages config)
  (list (system-connections-configuration-package config)))

(define (system-connection-extensions original-config extension-configs)
  (system-connections-configuration
   (inherit original-config)
   (config
    (append (system-connections-configuration-config original-config)
	    (append-map
	     system-connection-extension-config extension-configs)))))

(define system-connections-service-type
  (service-type (name 'system-connections)
                (extensions
                 (list (service-extension
                        ;; etc-service-type
                        special-files-service-type
                        add-connections-configuration)
                       ;; (service-extension
                       ;;  home-profile-service-type
                       ;;  add-system-connection-packages)
                  ))
		(compose identity)
		(extend system-connection-extensions)
                (default-value (system-connections-configuration))
                (description "Install and configure system-connections for NetworkManager.")))

(define (generate-system-connections-documentation)
  (generate-documentation
   `((system-connections-configuration
      ,system-connections-configuration-fields))
   'system-connections-configuration))

#+end_src

Defining all system connections.

#+begin_src scheme :tangle ./system/connections.scm
;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.
(define-module (system connections)
  #:use-module (system connections-utils)
  #:use-module (gnu services)
  #:use-module (gnu services shepherd)
  #:use-module (gnu services configuration)
  #:use-module (guix packages)
  #:use-module (guix gexp)
  #:use-module (guix build utils)
  #:use-module (ice-9 string-fun)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 rdelim))

(define (wpa-psk-connection connection-id)
  (let* ((connection_id
           (string-replace-substring connection-id "-" "_"))
         (port
          (open-input-pipe
           (string-append "pass show wifi/" connection_id " 2>/dev/null")))
         (connection-psk (read-line port))
         (connection-name
          (when (string=? (read-delimited " " port) "Username:")
            (read-line port))))
    (close-pipe port)
    `(,connection-name
      ((connection
        ((id . ,connection-name)
         (uuid . ,connection-id)
         (type . wifi)))
       (wifi
        ((mode . infrastructure)
         (ssid . ,connection-name)))
       (wifi-security
        ((auth-alg . open)
         (key-mgmt . wpa-psk)
         (psk . ,connection-psk)))
       (ipv4 ((method . auto)))
       (ipv6 ((addr-gen-mode . stable-privacy)
              (method . auto)))))))

(define (wpa-eap-connection connection-id connection-eap)
  (let* ((connection_id
           (string-replace-substring connection-id "-" "_"))
         (port
          (open-input-pipe
           (string-append "pass show wifi/" connection_id " 2>/dev/null")))
         (connection-password (read-line port))
         (connection-identity
          (when (string=? (read-delimited " " port) "Username:")
            (read-line port)))
         (connection-name
          (when (string=? (read-delimited " " port) "URI:")
            (read-line port))))
    (close-pipe port)
    `(,connection-name
      ((connection
        ((id . ,connection-name)
         (uuid . ,connection-id)
         (type . wifi)))
       (wifi
        ((mode . infrastructure)
         (ssid . ,connection-name)))
       (wifi-security ((key-mgmt . wpa-eap)))
       ("802-1x"
        ((eap . ,connection-eap)
         (identity . ,connection-identity)
         (password . ,connection-password)
         (phase2-auth . mschapv2)))
       (ipv4 ((method . auto)))
       (ipv6 ((addr-gen-mode . stable-privacy)
              (method . auto)))))))

(define-public services
  (cons*
   (service
    system-connections-service-type
    (system-connections-configuration
     (config
      `(,(wpa-psk-connection "48d6ad3c-a415-4f46-b4db-6722f30d6ce4")
        ,(wpa-psk-connection "6aa57df9-ce9f-4fa7-a0de-c13f9120b392")
        ,(wpa-psk-connection "100deaa3-5775-46f2-ba53-1641889f5934")
        ,(wpa-psk-connection "dfb8c014-f4a0-4484-ac0e-48a5f7ad1b28")
        ,(wpa-psk-connection "e525ce2a-05f7-45d0-9cce-22ca44d9eaac")
        ,(wpa-psk-connection "2aa8f21b-ce79-42f9-8475-82c1f3f6a091")
        ,(wpa-psk-connection "9dceec52-08b0-4b60-8254-0cfb386d8e19")
        ,(wpa-psk-connection "dba6f528-451f-440e-953b-c9d2ebae61d4")
        ,(wpa-psk-connection "7db52c41-bec4-4763-977d-873e07377fc3")
        ,(wpa-psk-connection "85a2f17b-39f4-4ff9-8914-0b175a266913")
        ,(wpa-psk-connection "92c2cea4-f8c1-4ff3-a71d-9512309a09ba")
        ,(wpa-psk-connection "8213663d-a88f-430c-804f-916e97238692")
        ,(wpa-psk-connection "683a3c4d-9d63-444f-819d-91f9ad512cdc")
        ,(wpa-psk-connection "62d31516-d06a-4a2b-b240-5b39866eace8")
        ,(wpa-psk-connection "d5d5ed62-5a95-47e9-8c80-2aba90d8cab1")
        ,(wpa-eap-connection
          "61201506-ff48-4e37-9089-083bfb0384b0" "peap;")
        ,(wpa-eap-connection
          "e7d0c5aa-92fe-4686-bd54-0bc447ddf775" "ttls;")
        ,(wpa-eap-connection
          "8f03eb94-be5c-4d44-a6f7-f2c8290d4552" "ttls;")
        ,(let* ((connection-id "dfacb629-a107-4714-a4f6-7d6bf2e661f0")
                (connection_id
                 (string-replace-substring connection-id "-" "_"))
                (port
                 (open-input-pipe
                  (string-append "pass show wifi/" connection_id " 2>/dev/null")))
                (connection-password (read-line port))
                (connection-identity
                 (when (string=? (read-delimited " " port) "Username:")
                   (read-line port)))
                (connection-name
                 (when (string=? (read-delimited " " port) "URI:")
                   (read-line port))))
           `(,connection-name
             ((connection
               ((id . ,connection-name)
                (uuid . ,connection-id)
                (type . ethernet)))
              ;; (ethernet . (#~""))
              ("802-1x"
               ((eap . "ttls;")
                (identity . ,connection-identity)
                (password . ,connection-password)
                (phase2-autheap . mschapv2)))
              (ipv4 ((method . auto)))
              (ipv6 ((addr-gen-mode . stable-privacy)
                     (method . auto))))))
         ))
     ))))
#+end_src

Note that we added a few lines in the Makefile for allowing NetworkManager to work with plain-files instead of links, which seem to not be allowed by NetworkManager.

* Home
** GnuPG
Asymmetric / public-key cryptography use cases
- Sign the work (binaries, commits, tags)
- Encrypt (files, emails, passwords)
- Authenticate (SSH, Git, VPN)
- Create and sign other keys

*** Managing keys
See https://gist.github.com/abcdw/3ee8fc771ce5b0b9e50ce670756cbe2d for more info.

**** Generating key and subkeys
Do it in a safe environment.
#+begin_src shell
gpg --expert --full-generate-key
gpg --edit-key
addkey
#+end_src
**** Backing up keys
#+begin_src shell
# Use encrypted flash drive or similiar tool instead of ~/gpg-backup dir
# For more information: https://github.com/drduh/YubiKey-Guide#backup
mkdir ~/gpg-backup
gpg --export-secret-keys > ~/gpg-backup/keys.gpg
gpg --export-secret-subkeys > ~/gpg-backup/subkeys.gpg
#+end_src
**** Publishing key
- keyserver
- web
- email/etc
**** Searching for key
#+begin_src shell
gpg --keyserver keyserver.ubuntu.com --search-keys KEYID
#+end_src
**** Importing keys
**** Generating ssh public key
https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
https://github.com/drduh/YubiKey-Guide#ssh
**** Extending expire date
**** TODO Management :
- one main key
- subkeys for different use cases :
  - work
  - ecological awakening
  - free software contributions

*** Source code

*Guix packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"pinentry-bemenu"
"bemenu"
"pam-gnupg"

#+end_src

** SSH

#+begin_src scheme :tangle ./home/services/ssh-utils.scm

(define-module (home services ssh-utils)
  #:use-module (guix gexp)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 rdelim)
  #:use-module (gnu home-services ssh))

(define-public (ssh-config id)
  (let* ((port
          (open-input-pipe
           (string-append "pass show ssh/ssh_" id " 2>/dev/null")))
         (key (read-line port))
         (ssh-user
          (when (string=? (read-delimited " " port) "Username:")
            (read-line port)))
         (uri
          (when (string=? (read-delimited " " port) "URI:")
            (read-line port)))
         (ssh-port
          (when (string=? (read-delimited " " port) "Port:")
            (read-line port)))
         (hostkey
          (when (string=? (read-delimited " " port) "HostKey:")
            (read-line port)))
         (ssh-options
          `((hostname . ,uri)
            (identity-file . ,(string-append "~/.ssh/" key))
            (port . ,ssh-port)
            (user . ,ssh-user))))
    (close-pipe port)
    (list (ssh-host
           (host id)
           (options ssh-options))
          (string-append uri " " hostkey "\n"))))

#+end_src

*Guile modules*
#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
  #:use-module (gnu packages ssh)
  #:use-module (rde features ssh)
  #:use-module (home services ssh-utils)
#+end_src

*Main features*
#+begin_src scheme :noweb-ref main-features :noweb-sep "\n"
(feature-ssh
    #:ssh-configuration
    (home-ssh-configuration
     (package openssh-sans-x)
     (toplevel-options
      '((match . "host * exec \"gpg-connect-agent UPDATESTARTUPTTY /bye\"")))
     (user-known-hosts-file
      '("~/.dotfiles/home/config/ssh/known_hosts"
        "~/.ssh/my_known_hosts"))
     (default-host "*")
     (default-options
       '((address-family . "inet")))
     (extra-config
      `(,(car (ssh-config "my_git"))
        ,(car (ssh-config "my_server"))
        ,(car (ssh-config "my_dev"))
        ,(car (ssh-config "inari"))
        ,(car (ssh-config "pre_site"))
        ,(car (ssh-config "pre_bitwarden"))))))
#+end_src

*Files*
#+begin_src scheme :noweb-ref ssh-files
`(".ssh/id_rsa.pub" ,(local-file "keys/id_rsa.pub"))
`(".ssh/id_ed25519.pub" ,(local-file "keys/id_ed25519.pub"))
`(".ssh/id_rsa_git.pub" ,(local-file "keys/id_rsa_git.pub"))
`(".ssh/my_known_hosts"
            ,(plain-file "my_known_hosts"
            (string-append
             (car (cdr (ssh-config "my_git")))
             (car (cdr (ssh-config "my_server")))
             (car (cdr (ssh-config "my_dev")))
             (car (cdr (ssh-config "pre_site")))
             (car (cdr (ssh-config "pre_bitwarden")))
             (car (cdr (ssh-config "inari"))))))
#+end_src

** Window Management

*Guile modules*
#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
;; #:use-module (home packages swayr)
#:use-module (home features wm)
#+end_src

*Main features*
#+begin_src scheme :noweb-ref main-features :noweb-sep "\n"
(feature-sway
 #:xwayland? #t
 #:extra-config
 `((bindsym
    --to-code
    (($mod+Shift+s exec "grim -g \"$(slurp)\" - | swappy -f -")
     (Print exec "grim - | wl-copy -t image/png")
     ($mod+dollar exec makoctl dismiss --all)
     ($mod+exclam exec makoctl set-mode dnd)
     ($mod+Shift+exclam exec makoctl set-mode default)
     ($mod+p exec ~/.dotfiles/home/scripts/menu_pass)
     ($mod+u exec menuunicode)
     ($mod+w exec chromium)
     ($mod+Shift+w exec chromium --incognito)
     ;; ($mod+Shift+o exec emacsclient -c -e "'(dired /home/graves)'")
     ($mod+m exec ~/.dotfiles/home/scripts/playm)
     ($mod+Shift+m exec killall mpv)))

   (exec wlsunset -l 48.86 -L 2.35 -T 6500 -t 3000)
   (exec mako)

   (workspace_auto_back_and_forth yes)
   (focus_follows_mouse no)
   (smart_borders on)
   (title_align center)

   (output * bg
           ,(string-append
             (getenv "HOME")
             "/.dotfiles/home/share/fond_pre.jpg") fill)
   (output eDP-1 scale 1)

   (assign "[app_id=\"nyxt\"]" 3)
   (assign "[app_id=\"chromium-browser\"]" 3)

   (for_window
    "[app_id=\"^.*\"]"
    inhibit_idle fullscreen)
   (for_window
    "[title=\"^(?:Open|Save) (?:File|Folder|As).*\"]"
    floating enable, resize set width 70 ppt height 70 ppt)

   (client.focused "#EEEEEE" "#005577" "#770000" "#770000" "#770000")
   (client.unfocused "#BBBBBB" "#222222" "#444444")
   (seat * xcursor_theme Adwaita 24)

   ;; (bindswitch --reload --locked lid:on exec /run/setuid-programs/swaylock)

   ;; FIXME: Use absolute path, move to feature-network
   (exec nm-applet --indicator)

   ;; (bindsym $mod+Shift+o ,#~"[floating]" kill)
   (input type:touchpad
          ;; TODO: Move it to feature-sway or feature-mouse?
          ( ;; (natural_scroll enabled)
           (tap enabled)))))
(feature-sway-run-on-tty
 #:sway-tty-number 1)
(feature-sway-screenshot)
;; (feature-sway-statusbar
;;  #:use-global-fonts? #f)
(feature-waybar
 #:waybar-modules
 (list
  (waybar-sway-workspaces)
  ;; (waybar-sway-window)
  (waybar-tray)
  (waybar-idle-inhibitor)
  ;; (waybar-temperature)
  (waybar-sway-language)
  (waybar-battery #:intense? #f)
  (waybar-clock)))
(feature-swayidle)
(feature-swaylock
 #:swaylock (@ (gnu packages wm) swaylock-effects)
 ;; The blur on lock screen is not privacy-friendly.
 #:extra-config
'(;; (screenshots)
  ;; (effect-blur . 7x5)
     (clock)
     (image . /home/graves/.dotfiles/home/share/fond_lock_pre.jpg)))
;; (feature-swayr)
#+end_src

** Emacs

Most of the current emacs configuration basically relies on rde.

Some later improvements I might add to my rde configuration :
- Would frames-only-mode be somehow useful for rde ?
- need to check for geiser-guile-load-path ? doesn't seem to work that well.
- learn to use and configure eglot
- customize font sizes in org-mode by relying on daviwil's implementation ?
- on this subject, there's also the possibility to add different fonts for source code in this configuration.
- When possible, allow calendar sync based on daviwil's implementation ?
- Reminders (through org-wild-notifier ?)
- Org present when preparing for presentations.
- Quickly document your workflow like https://jethrokuan.github.io/org-roam-guide/
- org-roam-bibtex: ensure that opening files work properly
- flycheck only works with eglot, and not clear with which languages they work.
- bind emacs functions for =eval=, =eval buffer= and =eval region=.
- check all Emacs Development packages (=elgot=, =flycheck=, =python=, =web-mode=)
- add feature for calendar =calfw=
- some interesting configuration for project hooks I don't use yet.
- I have included openwith configuration under a specific feature, but xdg-open does not do its job, and defaults applications are not properly set.

*** Themes

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"emacs-doom-themes"
"emacs-nord-theme"
#+end_src

*** Org Mode

**** Workflow Principles

***** Don't look at Org files to find the next task, use the agenda view
***** Ensure sufficient metadata on tasks for effective filtering
***** Keep a daily log of work being done
***** Set timers on tasks
Use =org-timer-set-timer= to set a countdown timer for a task based on the "effort" value I set on it.
***** Future ideas and objectives
****** Learning panel ?
- I should use org-roam to synthetize information and org-drill in order to batch learn things easily. Maybe also having a learning.org and a learning tab is good practice in order to planify more clearly how I intend to learn things.

****** Manage proper clocking
I have read the corresponding man page quickly, seems pretty simple, but how is the information used after that ?
****** Email integration
- haven't tested how this integration works for now, maybe as simple as an org-capture.
- Workfkow : mail inbox --> todo.org --> review every evening ?
- have read a blog post claiming that emacs wasn't necessarily good with a lot of big extensions (mu4e, elfeed), mail ?
****** Block time properly on 25 minutes blocks + 5 min break
- Maybe inquire into the pomodoro technique ?
  Or maybe it's just good straightforward when properly done ?
****** Objective : set a goal on how organized should you be in beginning of January.
**** Workflow States

I try to keep my set of workflow states simple so that I can filter on them easily:

- =TODO= - A task that should be done at some point
- =NEXT= - This task should be done next (in the Getting Things Done sense) Beware !
- =HOLD= - Waiting for someone else to be actionable again
- =DONE= - It's done!

I also make sure to set them up in the order I want =org-sort-entries= to sort them in when I use the =o= option upon invoking that command.

**** Tags

Tags are used to filter all tasks to find anything actionable in a particular context.  I use the =@home= and =@work= tags for explicit contexts and then the rest are used for filtering tasks for agenda views.

- =manage= - I'm the person responsible for setting the rythm for this task. People rely on you, it should be prioritized above others.
- =organize= - This task should in some time help to complete other tasks (faster or simply the case). To prioritize over unproductive tasks.
- =followup= - Someone is waiting on me to follow up or give feedback on this task, it should be prioritized above others
- =batch= - The task can be batched with others (low effort)

**** Agendas

My agenda configuration is a custom one.

It integrates three different org-agenda-custom-commands :
- =Agenda of the day= is a classic agenda with an integrated =Current tasks= part.
- =Overview= is a complete agenda with priorities and workflow states and tags proper discrimination.
- =Review= is a agenda with =Backlog= and unprioritized =TODO= states.

Currently still customizing my agenda to match my expected use, I'll try to migrate it to rde later.

** Mail

*Guile modules*
#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
  #:use-module (rde features mail)
  #:use-module (guix build utils)
  #:use-module (srfi srfi-1)
  #:use-module (gnu packages mail)
#+end_src

*Mail configuration*
#+begin_src scheme :noweb-ref mail-utils
(define %mail-list
  (let ((passdir (string-append (getenv "HOME") "/.local/var/lib/password-store")))
    (append
      (list "ngraves@ngraves.fr") ;ensuring primary_email
      (delete "ngraves@ngraves.fr"
        (map (lambda file
           (string-drop
            (string-drop-right (car file) (string-length ".gpg"))
            (+ 1 (string-length passdir))))
         (find-files passdir "@[-a-z\\.]+\\.[a-z]{2,3}\\.gpg$"))))))

(define (id->type id)
  (cond
    ((string=? id "neleves") 'enpc)
    ((string=? id "ngmx") 'gmx-fr)
    ((string=? id "ngmail") 'gmail)
    (#t 'ovh)))

(define (user->id user)
      (string-append
        (string-take user 1)
          (car (string-split (car (cdr (string-split user #\@))) #\.))))

(define* (single-mail-acc user)
  "Make a simple mail-account with ovh type by default."
(let* ((id_ (user->id user)))
 (list
  (mail-account
   (id (string->symbol id_))
   (fqda user)
   (type (id->type id_))
   (pass-cmd (string-append "pass show " user " | head -1"))))))

(define my-msmtp-provider-settings
  (acons 'enpc '((host . "boyer2.enpc.fr")
                 (port . 465)
                 (tls_starttls . off))
          %default-msmtp-provider-settings))

(define (my-mail-directory-fn config)
  (string-append (getenv "XDG_STATE_HOME") "/mail"))

(define* (mail-lst id fqda urls)
  "Make a simple mailing-list."
  (mailing-list
   (id   id)
   (fqda fqda)
   (config (l2md-repo
            (name (symbol->string id))
            (urls urls)))))

(define enpc-isync-settings
  (generate-isync-serializer "messagerie.enpc.fr"
    (@@ (rde features mail) gandi-folder-mapping)
    #:cipher-string 'DEFAULT@SECLEVEL=1
    #:pipeline-depth 1))

(define %isync-serializers
  (acons 'enpc enpc-isync-settings
         (@@ (rde features mail) %default-isync-serializers)))

(define %isync-global-settings
  `((Create Near)
    (Expunge Both)
    (SyncState *)
    (MaxMessages 0)
    (ExpireUnread no)
    ,#~""))
#+end_src

*Mail features*
#+begin_src scheme :noweb-ref main-features
(feature-mail-settings
  #:mail-accounts
    (append-map single-mail-acc %mail-list)
  #:mail-directory-fn my-mail-directory-fn
  #:mailing-lists (list (mail-lst 'guix-devel "guix-devel@gnu.org"
                                  '("https://yhetil.org/guix-devel/0"))
                        (mail-lst 'guix-bugs "guix-bugs@gnu.org"
                                  '("https://yhetil.org/guix-bugs/0"))
                        (mail-lst 'guix-patches "guix-patches@gnu.org"
                                  '("https://yhetil.org/guix-patches/1"))))
(feature-msmtp
 #:msmtp msmtp
 #:msmtp-provider-settings my-msmtp-provider-settings)
(feature-isync
 #:mail-account-ids
  (append-map
    (lambda (x) (list (string->symbol (user->id x)))) %mail-list)
 #:isync-global-settings %isync-global-settings
 #:isync-serializers %isync-serializers
 #:isync-verbose #t)
(feature-notmuch)
(feature-emacs-message)
(feature-l2md)
#+end_src

** User features

*Guile modules*
#+begin_src scheme :noweb-ref user-features-modules :noweb-sep "\n"
  #:use-module (rde features gnupg)
  #:use-module (rde features keyboard)
  #:use-module (rde features password-utils)
#+end_src

#+begin_src scheme :noweb-ref user-features

(define-public %user-features
  (list
   (feature-user-info
    #:user-name "graves"
    #:full-name "Nicolas Graves"
    #:email "ngraves@ngraves.fr"
    #:user-initial-password-hash
    "gaAxdKLOplpY2"
    ;; (crypt "bob" "$6$abc")

    ;; WARNING: This option can reduce the explorability by hiding
    ;; some helpful messages and parts of the interface for the sake
    ;; of minimalistic, less distractive and clean look.  Generally
    ;; it's not recommended to use it.
    #:emacs-advanced-user? #t)
   (feature-gnupg
    #:gpg-ssh-agent? #t
    #:ssh-keys
    '(("4B8C7C409D8E286BAF9F1B075181FFE6E0AF7249")
      ("748668172FB0CE88407F006E6ABD649DDD3EF2DD")
      ("F204255D0F694AC6CEC585EFC21FFE27298B9D92"))
    #:gpg-primary-key "3F61A23D53B5B118"
    #:gpg-smart-card? #f)

   (feature-password-store
    #:remote-password-store-url "git@git.sr.ht:~ngraves/pass")

   (feature-keyboard
    ;; To get all available options, layouts and variants run:
    ;; cat `guix build xkeyboard-config`/share/X11/xkb/rules/evdev.lst
    #:keyboard-layout
    (keyboard-layout
     "fr,fr" "latin9,bepo"
     #:options '("caps:escape" "grp:shifts_toggle")))))

#+end_src

** Utils
*** Themes

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"hicolor-icon-theme"
"adwaita-icon-theme"
"gnome-themes-standard"
"papirus-icon-theme"
"arc-theme"
#+end_src

*** Sound

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
  "pavucontrol"
  "alsa-utils"
#+end_src

*** Music

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
  "youtube-dl"
#+end_src

*** Bluetooth

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
  "bluez"
#+end_src

*** Image

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
  "swappy"
  "grim"
  "slurp"
  "imv"
#+end_src

*** Video
*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"ffmpeg"
#+end_src

*** Documents

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"rsync"
"zathura"
"zathura-pdf-mupdf"
"calibre"
"thunar"
#+end_src

*** Flatpak

The rationale for using flatpak is that some very popular applications are not present on GNU Guix. I'm trying to keep minimal dependencies on flatpak packages.

I'm using Ferdi to minimize the need to install various packages for discord, slack & co. And to keep configuration somewhere, although this time not in my dotfiles. Ferdi has had a few issues in the last couple of months, but seems to be online working again.

Proprietary apps and apps that use non-GTK, non-Qt toolkits are often limited to X11-only, which means they require =Xwayland= in order to work in a Wayland session. Hence the ~(xwayland enable)~ option in Sway configuration.

Some settings to add on wayland include ~--socket=wayland~ and ~--enable-features=UseOzonePlatform --ozone-platform=wayland~ (if the app is based on Electron).

In any way, we can imagine flatpak apps to be put in a wrapper to avoid repeat actions, when essential to a workflow. Maybe a hint for a future contribution ?

#+begin_src scheme :noweb-ref packages :noweb-sep ""
  "flatpak"

#+end_src

*** Browsers

*Guix Packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"ungoogled-chromium-wayland"
"ublock-origin-chromium"
"nyxt"
#+end_src

*** Misc

*Guix packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"figlet"
"libnotify"
"libxml2"
"wl-clipboard"
"wev"
"recutils"
"ripgrep"
"curl"
#+end_src

* Profile

#+begin_src scheme :tangle ./config.scm :noweb yes
(define-module (home config)
  #:use-module (rde features)
  #:use-module (rde features base)
<<modules>>
<<system-modules>>
  #:use-module (rde features system)
  #:use-module (rde features xdisorg)
  #:use-module (rde features xdg)
  #:use-module (rde features version-control)
  #:use-module (rde features fontutils)
  #:use-module (rde features terminals)
  #:use-module (rde features tmux)
  #:use-module (rde features shells)
  #:use-module (rde features shellutils)
  #:use-module (rde features emacs)
  #:use-module (rde features linux)
  #:use-module (rde features video)
  #:use-module (rde features markup)
  #:use-module (rde features networking)
  #:use-module (home features emacs)
  #:use-module (gnu services)
  #:use-module (gnu home services)
  #:use-module (gnu system keyboard)
  #:use-module (gnu packages)
  #:use-module (gnu packages emacs-xyz)
  #:use-module (rde packages)
  #:use-module (rde packages emacs)
  #:use-module (rde packages emacs-xyz)
  #:use-module (gnu packages fonts)
  #:use-module (guix gexp)
  #:use-module (guix inferior)
  #:use-module (guix channels)
  #:use-module (ice-9 match))


;;; User-specific features

<<mail-utils>>

;; Initial user's password hash will be available in store, so it's
;; use this feature with care
;; (display (crypt "hi" "$6$abc"))


;;; Generic features should be applicable for various hosts/users/etc

(define* (pkgs #:rest lst)
  (map specification->package+output lst))

(define* (pkgs-vanilla #:rest lst)
  "Packages from guix channel."
  (define channel-guix
    (list (channel
           (name 'guix)
           (url "https://git.savannah.gnu.org/git/guix.git")
           ;(commit
           ; "2b6af630d61dd5b16424be55088de2b079e9fbaf")
           )))

  (define inferior (inferior-for-channels channel-guix))
  (define (get-inferior-pkg pkg-name)
    (car (lookup-inferior-packages inferior pkg-name)))

   (map get-inferior-pkg lst))

;;; WARNING: The order can be important for features extending
;;; services of other features.  Be careful changing it.
(define %main-features
  (list
   (feature-custom-services
    #:feature-name-prefix 'ixy
    #:system-services
    (list
     ;; (service nix-service-type)
     )
    #:home-services
    ;; TODO: move to feature-irc-settings
    (list
      (service
      home-files-service-type
      (list
       <<ssh-files>>
       ;; `(".local/share/applications" ,(local-file "home/share/applications" #:recursive? #t))
       ;; `(".config/guix/manifests" ,(local-file "home/config/guix/manifests" #:recursive? #t))
       `(".config/zathura/zathurarc" ,(local-file "home/config/zathurarc"))
       `(".config/wget/wgetrc" ,(plain-file "wgetrc" "hsts-file=~/.cache/wget-hsts\n"))
       `(".config/youtube-viewer" ,(local-file "home/config/youtube-viewer" #:recursive? #t))
       ;; `(".config/mpv" ,(local-file "home/config/mpv" #:recursive? #t))
       ;; `(".xkb/symbols/programmer_beop"
         ;; ,(local-file "home/config/xkb/symbols/programmer_beop"))
       ;;`(".config/pam-gnupg"
       ;;  ,(plain-file "pam-gnupg-keygrip"
       ;;               "4B8C7C409D8E286BAF9F1B075181FFE6E0AF7249"))
       `(".config/shell" ,(local-file "home/config/shell" #:recursive? #t))
       `(".rsync-filter" ,(local-file "home/config/rsync/rsync-filter"))
       `(".local/share/.rsync-filter" ,(local-file "home/config/rsync/share-rsync-filter"))
))
     ;; ((@ (gnu services) simple-service)
     ;;  'extend-shell-profile
     ;;  (@ (gnu home-services shells) home-shell-profile-service-type)
     ;;  (list
     ;;   #~(string-append
     ;;      "alias superls="
     ;;      #$(file-append (@ (gnu packages base) coreutils) "/bin/ls"))))
     ))

   (feature-base-services)
   (feature-desktop-services)
   (feature-pipewire)
   (feature-backlight #:step 5)

   (feature-fonts
    #:font-monospace (font "Iosevka" #:size 14 #:weight 'regular)
    ;; #:font-monospace (font "Fira Mono" #:size 14 #:weight 'semi-light)
    #:font-packages (list font-iosevka font-fira-mono))

   (feature-alacritty
    #:config-file (local-file "./home/config/alacritty.yml")
    #:default-terminal? #f
    #:backup-terminal? #t
    #:software-rendering? #f)
   (feature-vterm)
   (feature-zsh
    #:enable-zsh-autosuggestions? #t)
   (feature-bash)
   (feature-direnv)
   (feature-git
    #:sign-commits? #t
    #:git-gpg-sign-key "3F61A23D53B5B118"
    #:git-send-email? #t)
   <<main-features>>

   (feature-rofi)

   (feature-emacs
    #:emacs
    (if (string=? (or (getenv "BUILD_SUBMITTER") "") "git.sr.ht")
        (@ (gnu packages emacs) emacs-next-pgtk)
        emacs-next-pgtk-latest)
    #:extra-init-el
     `(;; using external programs sometimes requires having this variable set
       (setenv "WAYLAND_DISPLAY"
        (car (directory-files (getenv "XDG_RUNTIME_DIR") nil "wayland-[0-9]$")))
       (defun format-xml ()
          "Format XML files using libxml2."
          (interactive)
          (shell-command-on-region 1 (point-max) "xmllint --format -" (current-buffer) t)))
    #:additional-elisp-packages
    (append
     (list emacs-consult-dir)
     (pkgs "emacs-hl-todo"
           "emacs-restart-emacs")))
   (feature-emacs-appearance
    #:deuteranopia? #f)
   (feature-emacs-faces)
   (feature-emacs-completion
    #:mini-frame? #f)
   (feature-emacs-vertico)
   (feature-emacs-eglot)
   (feature-emacs-project)
   (feature-emacs-perspective)
   (feature-emacs-input-methods)
   (feature-emacs-which-key)
   (feature-emacs-keycast #:turn-on? #f)

   (feature-emacs-dired)
   (feature-emacs-eshell)
   (feature-emacs-monocle
    #:olivetti-body-width 100)

   ;; TODO: Revisit <https://en.wikipedia.org/wiki/Git-annex>
   (feature-emacs-git)
   ;; TODO: <https://www.labri.fr/perso/nrougier/GTD/index.html#table-of-contents>
   (feature-emacs-org
    #:org-directory "~/areas")

   (feature-emacs-my-org-agenda
    #:org-agenda-files '("~/areas"))
   (feature-emacs-smartparens
    #:show-smartparens? #t)

   (feature-markdown)
   (feature-mpv)

   (feature-xdg
    #:xdg-user-directories-configuration
    (home-xdg-user-directories-configuration
     (download "$HOME/tmp")
     (videos "$HOME/archives/videos")
     (music "$HOME/archives/music")
     (pictures "$HOME/archives/img")
     (documents "$HOME/resources")
     (publicshare "$HOME")
     (templates "$HOME")
     (desktop "$HOME")))

   ; features I added myself
   (feature-emacs-evil
    #:stateful-keymaps? #t
    #:nerd-commenter? #t
    )
   (feature-emacs-ui
    #:org-olivetti? #t
    #:org-modern-mode? #t
    #:org-appear? #t)
   (feature-emacs-ux
    #:unwarn? #t
    #:auto-save? #t
    #:auto-update-buffers? #t
    #:auto-clean-space? #t
    #:control-text-scale? #f  ; FIXME works but fonts changed when opening a new frame
    #:control-buffer-placement? #t
    #:auto-update-table-of-contents? #t
    #:ediff-for-sway? #f
   )
   (feature-emacs-tramp)
   (feature-emacs-openwith)
   (feature-emacs-elfeed
    #:opml-feeds-file "~/.dotfiles/home/config/elfeed.opml")
   (feature-emacs-dired-hacks
    #:evil? #t)
   ;; (feature-emacs-parinfer)
   (feature-emacs-guix-development
    #:guix-load-path "~/.local/src/guix"
    #:other-guile-load-paths (list "~/.local/src/rde")
    #:yasnippet-installed? #t)
   (feature-emacs-org-babel
    #:load-language-list
      (list "emacs-lisp" "python" "dot" "shell" "scheme")
    #:block-templates? #t
    #:eval-in-repl? #t)
   (feature-emacs-org-latex
    #:export-source-code? #t)
   (feature-emacs-my-org-roam
    #:org-roam-directory "~/resources/roam"
    #:org-roam-capture-templates
      '(("m" "main" plain "%?"
         :if-new (file+head "main/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("r" "reference" plain "%?"
         :if-new
         (file+head "reference/${slug}.org"
                    "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("a" "article" plain "%?"
         :if-new
         (file+head "articles/${slug}.org"
                    "#+title: ${title}\n#+filetags: :article:\n")
         :immediate-finish t
         :unnarrowed t)
        ("s" "Slipbox" entry  (file "resources/roam/todo.org")
         "* %?\n"))
    #:using-node-types? #t
    #:org-roam-dailies-directory "../../archives/journal"
    #:org-roam-ui? #t)
   (feature-emacs-org-roam-bibtex
    #:backend "citar"
    #:bibtex-library-path "~/resources/files"
    #:bibtex-notes-path "~/resources/roam"
    #:global-bibliography (list "~/resources/roam/biblio.bib"))
;; Unfonctionnal, as if the package emacs-eval-in repl wasn't existing.
   (feature-emacs-eval-in-repl
    #:load-language-list
      (list "emacs-lisp" "python" "shell" "scheme")
    #:repl-placement "right"
    #:rely-on-geiser? #t)
   (feature-emacs-origami-el)
   (feature-emacs-deft)
   (feature-emacs-python)
   (feature-emacs-web-mode
    #:rainbow-mode? #t)
   (feature-emacs-yaml-mode)
   (feature-emacs-org-clocking
    #:pomodoro? #t)
   (feature-emacs-yasnippet)
   (feature-emacs-geiser)
   (feature-emacs-flycheck)
   ;; (feature-emacs-lispy)
   ;; (feature-emacs-general
    ;; #:files-shortcuts #t)

   (feature-base-packages
    #:home-packages
    (append
     (pkgs
      <<packages>>
      )))))

(define %laptop-features
  (list ))

<<host-features>>


;;; rde-config and helpers for generating home-environment and
;;; operating-system records.

(define-public %config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     %host-features))))

;; TODISCUSS: Make rde-config-os/he to be a feature instead of getter?
(define-public %os
  (rde-config-operating-system %config))

(define %he
  (rde-config-home-environment %config))

<<live-os>>

(define (dispatcher)
  (let ((rde-target (getenv "RDE_TARGET")))
    (match rde-target
      ("home" %he)
      ("system" %os)
      ("live-system" live-os)
      ("live-install" live-usb)
      (_ %he))))

;; (pretty-print-rde-config ixy-config)
;; (use-modules (gnu services)
;; 	     (gnu services base))
;; (display
;;  (filter (lambda (x)
;; 	   (eq? (service-kind x) console-font-service-type))
;; 	 (rde-config-system-services ixy-config)))

;; (use-modules (rde features))
;; ((@ (ice-9 pretty-print) pretty-print)
;;  (map feature-name (rde-config-features ixy-config)))

(dispatcher)

#+end_src

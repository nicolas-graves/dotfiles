#+TITLE: Guix Configuration with rde
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

This is an ongoing evolution of my Guix configuration using rde project.

* System
** Channels

Guix supports the concept of [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]] which contain Guix package definitions that can be installed on your machine.  Aside from the =%default-channels= list, I also use the [[https://gitlab.com/nonguix/nonguix][Nonguix]] channel to install packages that aren't included with Guix by default like the non-free Linux kernel. I generate my real =.config/guix/channels.scm= file based on this snippets.

*.config/guix/channels.scm:*

#+begin_src scheme :noweb-ref base-channels
;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")
  ;; (commit "1de0c32142c54bc73af5556d5e45c77152b31f0f")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
 (channel
  (name 'graves)
  (url "https://git.sr.ht/~ngraves/guix-channel"))
 (channel
  (name 'rde)
  (url "https://git.sr.ht/~abcdw/rde")
  ;; (commit "ab6931cc1d05c8ab95a1b6c4ab34d0051f7419d7")
  (introduction
   (make-channel-introduction
    "257cebd587b66e4d865b3537a9a88cccd7107c95"
    (openpgp-fingerprint
     "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
 (channel
  (name 'guixrus)
  (url "https://git.sr.ht/~whereiseveryone/guixrus")
  ;; (commit "beb74e8014d58a0b176cbf830aa32a4964346b70")
  (introduction
   (make-channel-introduction
    "7c67c3a9f299517bfc4ce8235628657898dd26b2"
    (openpgp-fingerprint
     "CD2D 5EAA A98C CB37 DA91  D6B0 5F58 1664 7F8B E551"))))
#+end_src

While working in some projects / directories, or when testing patches to packages and services, I may use a local channel. The configuration associated with it is stored right here. Also adding the last channel.
This part is using conditional tangling.

#+begin_src scheme :tangle (if (string= system-name "20AMS6GD00") "~/.config/guix/channels.scm" "no") :noweb yes

(list
 <<base-channels>>
 (channel
  (name 'guix)
   (url "https://git.savannah.gnu.org/git/guix.git")
   (commit "dde2e36394a07a863339950e18f384f4f2ce69fd")
  (introduction
   (make-channel-introduction
    "9edb3f66fd807b096b48283debdcddccfea34bad"
    (openpgp-fingerprint
     "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

#+begin_src scheme :tangle (if (string= system-name "2325K55") "~/.config/guix/channels.scm" "no") :noweb yes
;;
(list
 <<base-channels>>
 (channel
  (name 'guix)
  (url "https://git.savannah.gnu.org/git/guix.git")
   ;; (commit "cdb6b19b5fc6fec94d7a27062ef87dca9e4bbcee")
   (introduction
    (make-channel-introduction
     "9edb3f66fd807b096b48283debdcddccfea34bad"
     (openpgp-fingerprint
      "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA")))))

#+end_src

#+begin_src scheme :tangle (if (string= system-name "W54_55SU1,SUW") "~/.config/guix/channels.scm" "no") :noweb yes

;; (use-modules (guix ci)
;;              (guix channels))

(list
 <<base-channels>>
 (channel
  (name 'guix)
  (url "https://github.com/nicolas-graves/guix")
  ;; (url "https://git.savannah.gnu.org/git/guix.git")
  ;; (commit "975966ba09e24d813cf94a794c4bd6375777372a")
  (introduction
   (make-channel-introduction
    "9edb3f66fd807b096b48283debdcddccfea34bad"
    (openpgp-fingerprint
     "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
 ;; (channel-with-substitutes-available
  ;; %default-guix-channel
  ;; "https://ci.guix.gnu.org")
  )
#+end_src

** Systems
*** File Systems

Each computer has its own file system. The small snippet =lookup= allows to use a simple ~alist~ for storing file system information.

*Devices*
#+begin_src emacs-lisp :eval yes
(setq devices
      '((Precision-3571 .
         ((efi         . /dev/nvme0n1p1)
          (swap        . /dev/nvme0n1p2)
          (uuid-mapped . 86106e76-c07f-441a-a515-06559c617065)))
        (20AMS6GD00 .
         ((efi         . /dev/sda1)
          (swap        . /dev/sda2)
          (uuid-mapped . a9319ee9-f216-4cad-bfa5-99a24a576562)))))
#+end_src

#+NAME: lookup
#+begin_src emacs-lisp :var var="a var name"
; get the value of device-type var
(cdr (assoc var
            ; in sub-alist with the right system-name
        (assoc (intern system-name) devices)))
#+end_src

*File systems*
#+begin_src scheme :noweb-ref host-features :noweb yes

;;; Hardware/host specifis features

;; TODO: Switch from UUIDs to partition labels For better
;; reproducibilty and easier setup.  Grub doesn't support luks2 yet.

(define %swap-device
  (swap-space (target "<<lookup(var='swap)>>")))

(define %mapped-device
  (mapped-device
    (source (uuid "<<lookup(var='uuid-mapped)>>"))
    (targets (list "enc"))
    (type luks-device-mapping)))

(define file-systems
  (append
  (append
   (map (match-lambda
	  ((subvol . mount-point)
	   (file-system
	     (type "btrfs")
	     ;;(device (file-system-label "enc"))
	     (device "/dev/mapper/enc")
	     (mount-point mount-point)
	     (options (format #f "autodefrag,compress=zstd,ssd_spread,space_cache=v2,subvol=~a" subvol))
	     (dependencies (list %mapped-device))
	     )))
	'((root . "/")
	  (store  . "/gnu/store")
	  (home . "/home")
	  (data . "/data")
	  (boot . "/boot")
	  (log  . "/var/log")))
   (list (file-system
           (mount-point "/boot/efi")
           (type "vfat")
           (device "<<lookup(var='efi)>>"))))
   %base-file-systems))

#+end_src

*** Host Features

*Guile modules*
#+begin_src scheme :noweb-ref system-modules :noweb-sep "\n"
  #:use-module (gnu system)
  #:use-module (gnu system file-systems)
  #:use-module (gnu system mapped-devices)
  #:use-module (gnu system linux-initrd)
  #:use-module (nongnu system linux-initrd)
  #:use-module (nongnu packages linux)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 rdelim)
#+end_src

*Host features*
#+begin_src scheme :noweb-ref host-features

;;; Hardware/host specifis features

;; TODO: Switch from UUIDs to partition labels For better
;; reproducibilty and easier setup.  Grub doesn't support luks2 yet.

(define product-name
  (call-with-input-file "/sys/devices/virtual/dmi/id/product_name"
    (lambda (port) (read-line port))))

(define %host-features
  (list
   (feature-host-info
    #:host-name product-name
    #:timezone  "Europe/Paris")
   ;;; Allows to declare specific bootloader configuration,
   ;;; grub-efi-bootloader used by default
   ;; (feature-bootloader)
   (feature-file-systems
    #:mapped-devices (list %mapped-device)
    #:swap-devices (list %swap-device)
    #:file-systems  file-systems)
   (feature-kernel
    #:kernel linux
    #:initrd microcode-initrd
    #:initrd-modules (append (list "vmd") %base-initrd-modules)
    #:kernel-arguments
    (append (list "quiet" "rootfstype=btrfs") %default-kernel-arguments)
    #:firmware (list linux-firmware))
   (feature-hidpi)))

#+end_src

*** Live OS / USB Installation Image

To install Guix on another machine, you first to build need a USB image. Since I use laptops that require non-free components, I have to build a custom installation image with the full Linux kernel. I also include a few other programs that are useful for the installation process. I adapted this image from [[https://gitlab.com/nonguix/nonguix/blob/master/nongnu/system/install.scm][one found on the Nonguix repository]], hence the copyright header.

*./usb-install.scm:*

#+begin_src scheme :tangle ./usb-install.scm :noweb yes
(define-module (usb-install)
  #:use-module (rde features)
  #:use-module (rde features base)
<<system-modules>>
<<user-features-modules>>
  #:use-module (rde features keyboard)
  #:use-module (rde features system)
  #:use-module (rde features fontutils)
  #:use-module (rde features terminals)
  #:use-module (rde features shells)
  #:use-module (rde features shellutils)
  #:use-module (rde features networking)
  #:use-module (rde packages)
  #:use-module (srfi srfi-26)
  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services shepherd)
  #:use-module (gnu system keyboard)
  #:use-module (gnu packages)
  #:use-module (gnu system install)
  #:use-module (gnu system accounts)
  #:use-module (gnu system shadow)
  #:use-module (gnu packages)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages fonts)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages rust-apps)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages base)
  #:use-module (gnu packages bootloaders)
  #:use-module (gnu packages certs)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages gnome)
  #:use-module (gnu packages fontutils)
  #:use-module (gnu packages admin)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages file-systems)
  #:use-module (guix gexp)
  #:use-module (guix inferior)
  #:use-module (guix channels)
  #:use-module (guix modules)
  #:use-module (ice-9 match)
  #:use-module (nongnu packages linux)
  #:use-module ((system desktop) #:prefix desktop:)
  ;;#:use-module ((system connections) #:prefix connections:)
)

(define imported:%installation-services
  (@@ (gnu system install) %installation-services))

(use-modules (gnu system file-systems))
(define-public live-file-systems
  (list (file-system
           (mount-point "/")
           (device (file-system-label "Guix_image"))
           (type "ext4"))
         (file-system
           (mount-point "/tmp")
           (device "none")
           (type "tmpfs")
           (check? #f))))

;;; User features are used for both live-os and usb-image.
<<user-features>>

(use-modules (gnu services))
(define-public live-install
  (rde-config
   (features
    (append
     %user-features
     (list
      ;; (feature-host-info
       ;; #:host-name "gnu"
       ;; #:timezone  "Europe/Paris")
      (feature-file-systems
       #:file-systems
       ;; (append
        live-file-systems
         ;; (list %pseudo-terminal-file-system
               ;; %shared-memory-file-system
               ;; %efivars-file-system
               ;; %immutable-store))
        )
      (feature-kernel
       #:kernel linux
       #:firmware (list linux-firmware))
      (feature-base-packages
       #:system-packages
       (append
        (list
         ripgrep vim git
         exfat-utils fuse-exfat ntfs-3g
         zip unzip
         network-manager
         emacs-no-x-toolkit
         curl htop gnu-make
         glibc         ; for 'tzselect' & co.
         fontconfig
         font-dejavu font-gnu-unifont
         grub          ; mostly so xrefs to its manual work
         nss-certs)    ; To access HTTPS, use git, etc.
        %base-packages-disk-utilities
        %base-packages))
      (feature-base-services
       #:guix-substitute-urls
       (cons*
        "https://substitutes.nonguix.org"
        ;; (string-append "https://" (getenv "URI_service_substitutes"))
        %default-substitute-urls)
       #:guix-authorized-keys
       (cons*
        (local-file "./keys/nonguix.pub")
        (local-file "./keys/my-substitutes-key.pub")
        %default-authorized-guix-keys)
       #:base-services
       (let* ((path "/share/consolefonts/ter-132n")
              (font #~(string-append #$font-terminus #$path))
              (ttys '("tty1" "tty2" "tty3" "tty4" "tty5" "tty6")))
         (append
          (list
           (simple-service
            'channels-and-sources
            etc-service-type
            `(("channels.scm" ,(local-file "../.config/guix/channels.scm"))
              ("guix-sources" ,(local-file "../.local/src/guix"
                                           #:recursive? #t))
              ("rde-sources" ,(local-file "../.local/src/rde"
                                          #:recursive? #t)))))
          (modify-services (imported:%installation-services)
            (console-font-service-type
             config =>
             (map (cut cons <> font) ttys))
            )))))))))

(define-public live-usb
  (rde-config-operating-system live-install))

#+end_src

#+begin_src scheme :noweb-ref live-os
(use-modules (gnu services))
(define-public live-config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     (list
      ;; (feature-host-info
       ;; #:host-name "gnu"
       ;; #:timezone  "Europe/Paris")

      (feature-file-systems
       #:file-systems live-file-systems)
      (feature-kernel
       #:kernel linux
       #:firmware (list linux-firmware))
      (feature-hidpi)
      (feature-custom-services
       #:feature-name-prefix 'live
       #:system-services
       (list
        (simple-service
         'channels-and-sources
         etc-service-type
         `(("channels.scm" ,(local-file "../.config/guix/channels.scm"))
           ("guix-sources" ,(local-file "../.local/src/guix"
                                        #:recursive? #t))
           ("rde-sources" ,(local-file "../.local/src/rde"
                                       #:recursive? #t))))
        (service
         gc-root-service-type
         (list %he))
        )))))))

(define-public live-os
  (rde-config-operating-system live-config))

#+end_src

*Guile modules*

#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
  #:use-module (usb-install)
#+end_src

* Home
** GnuPG
Asymmetric / public-key cryptography use cases
- Sign the work (binaries, commits, tags)
- Encrypt (files, emails, passwords)
- Authenticate (SSH, Git, VPN)
- Create and sign other keys

*** Managing keys
See https://gist.github.com/abcdw/3ee8fc771ce5b0b9e50ce670756cbe2d for more info.

**** Generating key and subkeys
Do it in a safe environment.
#+begin_src shell
gpg --expert --full-generate-key
gpg --edit-key
addkey
#+end_src
**** Backing up keys
#+begin_src shell
# Use encrypted flash drive or similiar tool instead of ~/gpg-backup dir
# For more information: https://github.com/drduh/YubiKey-Guide#backup
mkdir ~/gpg-backup
gpg --export-secret-keys > ~/gpg-backup/keys.gpg
gpg --export-secret-subkeys > ~/gpg-backup/subkeys.gpg
#+end_src
**** Publishing key
- keyserver
- web
- email/etc
**** Searching for key
#+begin_src shell
gpg --keyserver keyserver.ubuntu.com --search-keys KEYID
#+end_src
**** Importing keys
**** Generating ssh public key
https://wiki.archlinux.org/index.php/GnuPG#SSH_agent
https://github.com/drduh/YubiKey-Guide#ssh
**** Extending expire date
**** TODO Management :
- one main key
- subkeys for different use cases :
  - work
  - ecological awakening
  - free software contributions

*** Source code

*Guix packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"pinentry-bemenu"
"bemenu"
"pam-gnupg"

#+end_src

** SSH

#+begin_src scheme :tangle ./services/ssh-utils.scm

(define-module (services ssh-utils)
  #:use-module (guix gexp)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 rdelim)
  #:use-module (gnu home-services ssh))

(define-public (ssh-config id)
  (let* ((port
          (open-input-pipe
           (string-append "pass show ssh/ssh_" id " 2>/dev/null")))
         (key (read-line port))
         (ssh-user
          (when (string=? (read-delimited " " port) "Username:")
            (read-line port)))
         (uri
          (when (string=? (read-delimited " " port) "URI:")
            (read-line port)))
         (ssh-port
          (when (string=? (read-delimited " " port) "Port:")
            (read-line port)))
         (hostkey
          (when (string=? (read-delimited " " port) "HostKey:")
            (read-line port)))
         (ssh-options
          `((hostname . ,uri)
            (identity-file . ,(string-append "~/.ssh/" key))
            (port . ,ssh-port)
            (user . ,ssh-user))))
    (close-pipe port)
    (list (ssh-host
           (host id)
           (options ssh-options))
          (string-append uri " " hostkey "\n"))))

#+end_src

*Guile modules*
#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
  #:use-module (gnu packages ssh)
  #:use-module (rde features ssh)
  #:use-module (home yggdrasil ssh-utils)
#+end_src

*Main features*
#+begin_src scheme :noweb-ref main-features :noweb-sep "\n"
(feature-ssh
    #:ssh-configuration
    (home-ssh-configuration
     (package openssh-sans-x)
     (toplevel-options
      '((match . "host * exec \"gpg-connect-agent UPDATESTARTUPTTY /bye\"")))
     (user-known-hosts-file
      '("~/.dotfiles/home/yggdrasil/files/config/ssh/known_hosts"
        "~/.ssh/my_known_hosts"))
     (default-host "*")
     (default-options
       '((address-family . "inet")))
     (extra-config
      `(,(car (ssh-config "my_git"))
        ,(car (ssh-config "my_server"))
        ,(car (ssh-config "my_dev"))
        ,(car (ssh-config "pre_site"))
        ,(car (ssh-config "pre_bitwarden"))))))
#+end_src

TODO Integrate this part somewhere.

#+begin_src scheme :tangle ./home/yggdrasil/ssh.scm

(define-module (home yggdrasil ssh)
  #:use-module (home yggdrasil ssh-utils)
  #:use-module (gnu home services)
  #:use-module (guix gexp)
  #:use-module (gnu home-services ssh))

(define-public known-hosts-config
  (plain-file
   "my_known_hosts"
   (string-append
    (car (cdr (ssh-config "my_git")))
    (car (cdr (ssh-config "my_server")))
    (car (cdr (ssh-config "my_dev")))
    (car (cdr (ssh-config "pre_site")))
    (car (cdr (ssh-config "pre_bitwarden")))
    (car (cdr (ssh-config "inari"))))))

#+end_src

** Window Management

*Guile modules*
#+begin_src scheme :noweb-ref modules :noweb-sep "\n"
  #:use-module (ngraves packages swayr)
  #:use-module (rde features wm)
#+end_src

*Main features*
#+begin_src scheme :noweb-ref main-features :noweb-sep "\n"
   (feature-sway
    #:xwayland? #f
    #:extra-config
    `(
      (bindsym
       --to-code
       (($mod+Shift+$left exec env RUST_BACKTRACE=1 swayr next-window all-workspaces >> ~/.local/var/log/swayr.log 2>&2)
        ($mod+Shift+$right exec env RUST_BACKTRACE=1 swayr prev-window all-workspaces >> ~/.local/var/log/swayr.log 2>&2)
        ($mod+Shift+s exec "grim -g \"$(slurp)\" - | swappy -f -")
        (Print exec "grim - | wl-copy -t image/png")
        ($mod+dollar exec makoctl dismiss --all)
        ($mod+exclam exec makoctl set-mode dnd)
        ($mod+Shift+exclam exec makoctl set-mode default)
        ($mod+p exec menu_pass)
        ($mod+u exec menuunicode)
        ($mod+w exec chromium)
        ($mod+Shift+w exec chromium --incognito)
        ($mod+e exec emacsclient -c -e "'(switch-to-buffer nil)'")
        ;; ($mod+Shift+o exec emacsclient -c -e "'(dired /home/graves)'")
        ($mod+m exec playm)
        ($mod+Shift+m exec killall mpv)
        ($mod+Escape exec env RUST_BACKTRACE=1 swayr switch-window >> ~/.local/var/log/swayr.log 2>&1)
        ($mod+Delete exec env RUST_BACKTRACE=1 swayr quit-window >> ~/.local/var/log/swayr.log 2>&1)
        ($mod+Tab exec env RUST_BACKTRACE=1 swayr switch-to-urgent-or-lru-window >> ~/.local/var/log/swayr.log 2>&1)
        ($mod+Shift+Space exec env RUST_BACKTRACE=1 swayr switch-workspace-or-window >> ~/.local/var/log/swayr.log 2>&1)
        ($mod+c exec env RUST_BACKTRACE=1 swayr execute-swaymsg-command >> ~/.local/var/log/swayr.log 2>&1)
        ($mod+Shift+c exec env RUST_BACKTRACE=1 swayr execute-swayr-command >> ~/.local/var/log/swayr.log 2>&1)
        (XF86MonBrightnessUp exec light -A 10)
        (XF86MonBrightnessDown exec light -U 10)
        (XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%)
        (XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%)
        (XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle)
        (XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle)
        ))

      (bindsym
       --locked
       ((XF86MonBrightnessUp exec light -A 10)
        (XF86MonBrightnessDown exec light -U 10)
        (XF86AudioRaiseVolume exec pactl set-sink-volume @DEFAULT_SINK@ +5%)
        (XF86AudioLowerVolume exec pactl set-sink-volume @DEFAULT_SINK@ -5%)
        (XF86AudioMute exec pactl set-sink-mute @DEFAULT_SINK@ toggle)
        (XF86AudioMicMute exec pactl set-source-mute @DEFAULT_SOURCE@ toggle)))

      (exec wlsunset -l 48.86 -L 2.35 -T 6500 -t 3000)
      (exec mako)
      (exec env RUST_BACKTRACE=1 RUST_LOG=swayr=debug swayrd > ~/.local/var/log/swayrd.log 2>&1)

      (workspace_auto_back_and_forth yes)
      (focus_follows_mouse no)
      (smart_borders on)
      (title_align center)


      (output * bg
              ,(string-append
                (getenv "HOME")
                "/.dotfiles/home/yggdrasil/files/share/fond_pre.jpg") fill)
      (output eDP-1 scale 1)

      (assign "[app_id=\"nyxt\"]" 2)
      (assign "[app_id=\"chromium-browser\"]" 2)
      ;; (assign "[app_id=\"emacs\"]" 3)

      (for_window
       "[app_id=\"^.*\"]"
       inhibit_idle fullscreen)
      (for_window
       "[title=\"^(?:Open|Save) (?:File|Folder|As).*\"]"
       floating enable, resize set width 70 ppt height 70 ppt)

      ;;(font "Iosevka, Light 13")
      (client.focused "#EEEEEE" "#005577" "#770000" "#770000" "#770000")
      (client.unfocused "#BBBBBB" "#222222" "#444444")
      (seat * xcursor_theme Adwaita 24)

      ;; (bindswitch --reload --locked lid:on exec /run/setuid-programs/swaylock)

      ;; FIXME: Use absolute path, move to feature-network
      (exec nm-applet --indicator)

      (bindsym $mod+Shift+o ,#~"[floating]" kill)
      (input type:touchpad
             ;; TODO: Move it to feature-sway or feature-mouse?
             ( ;; (natural_scroll enabled)
              (tap enabled)))))
   (feature-sway-run-on-tty
    #:sway-tty-number 2)
   (feature-sway-screenshot)
   ;; (feature-sway-statusbar
   ;;  #:use-global-fonts? #f)
   (feature-waybar
    #:waybar-modules
    (list
     (waybar-sway-workspaces)
     ;; (waybar-sway-window)
     (waybar-tray)
     (waybar-idle-inhibitor)
     ;; (waybar-temperature)
     (waybar-sway-language)
     (waybar-battery #:intense? #f)
     (waybar-clock)))
   (feature-swayidle)
   (feature-swaylock
    #:swaylock (@ (gnu packages wm) swaylock-effects)
    ;; The blur on lock screen is not privacy-friendly.
    #:extra-config '(;; (screenshots)
                     ;; (effect-blur . 7x5)
                     (clock)))
#+end_src

*Guix packages*

#+begin_src scheme :noweb-ref packages :noweb-sep ""
"swayr"

#+end_src


** User features

*Guile modules*
#+begin_src scheme :noweb-ref user-features-modules :noweb-sep "\n"
  #:use-module (rde features gnupg)
  #:use-module (rde features keyboard)
  #:use-module (rde features password-utils)
#+end_src


#+begin_src scheme :noweb-ref user-features

(define-public %user-features
  (list
   (feature-user-info
    #:user-name "graves"
    #:full-name "Nicolas Graves"
    #:email "ngraves@ngraves.fr"
    #:user-initial-password-hash
    "gaAxdKLOplpY2"
    ;; (crypt "bob" "$6$abc")

    ;; WARNING: This option can reduce the explorability by hiding
    ;; some helpful messages and parts of the interface for the sake
    ;; of minimalistic, less distractive and clean look.  Generally
    ;; it's not recommended to use it.
    #:emacs-advanced-user? #t)
   (feature-gnupg
    #:gpg-primary-key "3F61A23D53B5B118"
    #:gpg-smart-card? #f)

   (feature-password-store
    #:remote-password-store-url "git@git.sr.ht:~ngraves/pass")

   ;; (feature-mail-settings
   ;;  #:mail-accounts (list (mail-acc 'work       "andrew@trop.in" 'gandi)
   ;;                        (mail-acc 'personal   "andrewtropin@gmail.com"))
   ;;  #:mailing-lists (list (mail-lst 'guix-devel "guix-devel@gnu.org"
   ;;                                  '("https://yhetil.org/guix-devel/0"))
   ;;                        (mail-lst 'guix-bugs "guix-bugs@gnu.org"
   ;;                                  '("https://yhetil.org/guix-bugs/0"))
   ;;                        (mail-lst 'guix-patches "guix-patches@gnu.org"
   ;;                                  '("https://yhetil.org/guix-patches/1"))))

   (feature-keyboard
    ;; To get all available options, layouts and variants run:
    ;; cat `guix build xkeyboard-config`/share/X11/xkb/rules/evdev.lst
    #:keyboard-layout
    (keyboard-layout
     "fr,fr" "latin9,bepo"
     #:options '("caps:escape" "grp:shifts_toggle")))))

#+end_src


* Profile

#+begin_src scheme :tangle ./config.scm :noweb yes
(define-module (home config)
  #:use-module (rde features)
  #:use-module (rde features base)
<<modules>>
<<system-modules>>
  #:use-module (rde features system)
  #:use-module (rde features xdisorg)
  #:use-module (rde features xdg)
  #:use-module (rde features version-control)
  #:use-module (rde features fontutils)
  #:use-module (rde features terminals)
  #:use-module (rde features tmux)
  #:use-module (rde features shells)
  #:use-module (rde features shellutils)
  #:use-module (rde features emacs)
  #:use-module (rde features linux)
  #:use-module (rde features mail)
  #:use-module (rde features video)
  #:use-module (rde features markup)
  #:use-module (rde features networking)
  #:use-module (gnu services)
  #:use-module (gnu system keyboard)
  #:use-module (gnu packages)
  #:use-module (rde packages)
  #:use-module (rde packages emacs)
  #:use-module (rde packages emacs-xyz)
  #:use-module (gnu packages fonts)
  #:use-module (guix gexp)
  #:use-module (guix inferior)
  #:use-module (guix channels)
  #:use-module (ice-9 match))


;;; User-specific features
;; Mail features are disabled for now.

;; Initial user's password hash will be available in store, so it's
;; use this feature with care
;; (display (crypt "hi" "$6$abc"))

;; (define* (mail-acc id user #:optional (type 'gmail))
;;   "Make a simple mail-account with gmail type by default."
;;   (mail-account
;;    (id   id)
;;    (fqda user)
;;    (type type)))

;; (define* (mail-lst id fqda urls)
;;   "Make a simple mailing-list."
;;   (mailing-list
;;    (id   id)
;;    (fqda fqda)
;;    (config (l2md-repo
;;             (name (symbol->string id))
;;             (urls urls)))))

;;; TODO: feature-wallpapers https://wallhaven.cc/
;;; TODO: feature-icecat
;; PipeWire/iwd:
;; https://github.com/J-Lentz/iwgtk
;; https://github.com/krevedkokun/guix-config/blob/master/system/yggdrasil.scm


;;; Generic features should be applicable for various hosts/users/etc

(define* (pkgs #:rest lst)
  (map specification->package+output lst))

(define* (pkgs-vanilla #:rest lst)
  "Packages from guix channel."
  (define channel-guix
    (list (channel
           (name 'guix)
           (url "https://git.savannah.gnu.org/git/guix.git")
           ;(commit
           ; "2b6af630d61dd5b16424be55088de2b079e9fbaf")
           )))

  (define inferior (inferior-for-channels channel-guix))
  (define (get-inferior-pkg pkg-name)
    (car (lookup-inferior-packages inferior pkg-name)))

   (map get-inferior-pkg lst))


;;; WARNING: The order can be important for features extending
;;; services of other features.  Be careful changing it.
(define %main-features
  (list
   (feature-custom-services
    #:feature-name-prefix 'ixy
    #:system-services
    (list
     ;; (service nix-service-type)
     )
    #:home-services
    ;; TODO: move to feature-irc-settings
    (list
     ;; ((@ (gnu services) simple-service)
     ;;  'extend-shell-profile
     ;;  (@ (gnu home-services shells) home-shell-profile-service-type)
     ;;  (list
     ;;   #~(string-append
     ;;      "alias superls="
     ;;      #$(file-append (@ (gnu packages base) coreutils) "/bin/ls"))))
     ))

   (feature-base-services)
   (feature-desktop-services)
   (feature-pipewire)
   (feature-backlight #:step 5)

   (feature-fonts
    #:font-monospace (font "Iosevka" #:size 11 #:weight 'regular)
    ;; #:font-monospace (font "Fira Mono" #:size 14 #:weight 'semi-light)
    #:font-packages (list font-iosevka font-fira-mono))

   (feature-alacritty
    #:config-file (local-file "./home/config/alacritty.yml")
    #:default-terminal? #f
    #:backup-terminal? #t
    #:software-rendering? #f)
   (feature-vterm)
   (feature-zsh
    #:enable-zsh-autosuggestions? #t)
   (feature-bash)
   (feature-direnv)
   (feature-git)
   <<main-features>>

   (feature-rofi)

   (feature-emacs
    #:emacs
    (if (string=? (or (getenv "BUILD_SUBMITTER") "") "git.sr.ht")
        (@ (gnu packages emacs) emacs-next-pgtk)
        emacs-next-pgtk-latest)
    #:extra-init-el `()
    #:additional-elisp-packages
    (append
     (list emacs-consult-dir)
     (pkgs "emacs-hl-todo"
           "emacs-restart-emacs")))
   (feature-emacs-appearance)
   (feature-emacs-faces)
   (feature-emacs-completion
    #:mini-frame? #f)
   (feature-emacs-vertico)
   (feature-emacs-project)
   (feature-emacs-perspective)
   (feature-emacs-input-methods)
   (feature-emacs-which-key)
   (feature-emacs-keycast #:turn-on? #f)

   (feature-emacs-dired)
   (feature-emacs-eshell)
   (feature-emacs-monocle)

   ;; TODO: Revisit <https://en.wikipedia.org/wiki/Git-annex>
   (feature-emacs-git)
   ;; TODO: <https://www.labri.fr/perso/nrougier/GTD/index.html#table-of-contents>
   (feature-emacs-org
    #:org-directory "~/areas")
   (feature-emacs-org-roam
    ;; TODO: Rewrite to states
    #:org-roam-directory "~/resources/roam")
   (feature-emacs-org-agenda
    #:org-agenda-files '("~/areas"))
   (feature-emacs-smartparens
    #:show-smartparens? #t)

   (feature-markdown)
   (feature-mpv)

   (feature-xdg
    #:xdg-user-directories-configuration
    (home-xdg-user-directories-configuration
     (download "$HOME/tmp")
     (videos "$HOME/archives/videos")
     (music "$HOME/archives/music")
     (pictures "$HOME/archives/img")
     (documents "$HOME/resources")
     (publicshare "$HOME")
     (templates "$HOME")
     (desktop "$HOME")))
   (feature-base-packages
    #:home-packages
    (append
     (pkgs
      "figlet" ;; TODO: Move to emacs-artist-mode
      "calibre"
      "icecat" "nyxt"
      "ungoogled-chromium-wayland" "ublock-origin-chromium"

      "utox" "qtox" "jami"

      "alsa-utils" "youtube-dl" "imv" "cozy"
      "pavucontrol" "wev"
      "obs" "obs-wlrobs"
      "recutils" "binutils"
      "fheroes2"
      ;; TODO: Enable pipewire support to chromium by default
      ;; chrome://flags/#enable-webrtc-pipewire-capturer
      "hicolor-icon-theme" "adwaita-icon-theme" "gnome-themes-standard"
      "papirus-icon-theme" "arc-theme"
      "thunar"
      ;; "glib:bin"

      ;; TODO: Fix telega package!
      "ffmpeg"
      "ripgrep" "curl")))))

(define %laptop-features
  (list ))

<<host-features>>


;;; rde-config and helpers for generating home-environment and
;;; operating-system records.

(define-public %config
  (rde-config
   (features
    (append
     %user-features
     %main-features
     %host-features))))

;; TODISCUSS: Make rde-config-os/he to be a feature instead of getter?
(define-public %os
  (rde-config-operating-system %config))

(define %he
  (rde-config-home-environment %config))

<<live-os>>

(define (dispatcher)
  (let ((rde-target (getenv "RDE_TARGET")))
    (match rde-target
      ("home" %he)
      ("system" %os)
      ("live-system" live-os)
      ("live-install" live-usb)
      (_ %he))))

;; (pretty-print-rde-config ixy-config)
;; (use-modules (gnu services)
;; 	     (gnu services base))
;; (display
;;  (filter (lambda (x)
;; 	   (eq? (service-kind x) console-font-service-type))
;; 	 (rde-config-system-services ixy-config)))

;; (use-modules (rde features))
;; ((@ (ice-9 pretty-print) pretty-print)
;;  (map feature-name (rde-config-features ixy-config)))

(dispatcher)

#+end_src

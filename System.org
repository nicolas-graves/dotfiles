#+TITLE: System Configuration
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o555)

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#channels][Channels]]
- [[#systems][Systems]]
  - [[#base-configuration][Base Configuration]]
  - [[#desktop-configuration][Desktop Configuration]]
  - [[#system-connections][System connections]]
  - [[#yggdrasil][Yggdrasil]]
  - [[#usb-installation-image][USB Installation Image]]
- [[#dotfiles-management][Dotfiles Management]]
  - [[#syncing][Syncing]]
  - [[#updating][Updating]]
- [[#system-installation][System Installation]]
  - [[#building-the-installation-image][Building the Installation Image]]
  - [[#installing-guix][Installing Guix]]
    - [[#setting-up-wifi][Setting up WiFi]]
    - [[#setting-up-partitions][Setting Up Partitions]]
    - [[#initial-system-installation][Initial System Installation]]
    - [[#initial-system-setup][Initial System Setup]]
:END:

* Channels

Guix supports the concept of [[https://guix.gnu.org/manual/en/html_node/Channels.html#Channels][channels]] which basically amount to Git repositories which contain Guix package definitions that can be installed on your machine.  Aside from the =%default-channels= list, I also use the [[https://gitlab.com/nonguix/nonguix][Nonguix]] channel to install packages that aren't included with Guix by default like the non-free Linux kernel.

I also generate my real =.config/guix/channels.scm= file based on this =base-channels.scm= file.  This allows me to keep a pinned channel list in the real channels file while maintaining a canonical channel listing that I generate it from using the =update-channels= script (defined later in this file).

*.config/guix/channels.scm:*

#+begin_src scheme :noweb-ref channels :noweb-sep ""
;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.
;; I'm putting rde as a dependency but not nonguix, to avoid recomputing packages of my cuirass server.
;; (use-modules (guix ci)
;;              (guix channels))

 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")
  ;; (commit "cbf354715cc7a9569d3746d43a029b40485d1050")
  (introduction
   (make-channel-introduction
    "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
    (openpgp-fingerprint
     "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
 (channel
  (name 'graves)
  (url "https://git.sr.ht/~ngraves/guix-channel"))
 (channel
  (name 'rde)
  (url "https://git.sr.ht/~abcdw/rde")
  (introduction
   (make-channel-introduction
    "257cebd587b66e4d865b3537a9a88cccd7107c95"
    (openpgp-fingerprint
     "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
 (channel
  (name 'flat)
  (url "https://github.com/flatwhatson/guix-channel.git")
  (introduction
   (make-channel-introduction
    "33f86a4b48205c0dc19d7c036c85393f0766f806"
    (openpgp-fingerprint
     "736A C00E 1254 378B A982  7AF6 9DBE 8265 81B6 4490"))))
#+end_src

While working in some projects / directories, or when testing patches to packages and services, I may use a local channel. The configuration associated with it is stored right here. Also adding the last channel.
This part is using conditional tangling.

#+begin_src scheme :tangle (if (string= system-name "20AMS6GD00") "~/.config/guix/channels.scm" "no") :noweb yes

(list
 <<channels>>
 (channel
  (name 'manifesto)
  (url "file:///home/graves/docs/activism/pre/admin_dev/site_pre/manifesto/deploy/guix-channel")
  ;; (commit "3c386f76c8cf028735582a5b320c1c793abfc042") ; wagtail 2.11
  ;; (commit "fda4b27d62841e4902851af10c681037e7bf6a11") ; wagtail 2.10
  ;; (commit "f20c160dd3930461c975fc1b4bfff402d501e469") ; wagtail 2.8
  )
 %default-guix-channel)

#+end_src

#+begin_src scheme :tangle (if (string= system-name "2325K55") "~/.config/guix/channels.scm" "no") :noweb yes

(list
 <<channels>>
 %default-guix-channel)

#+end_src

#+begin_src scheme :tangle (if (string= system-name "W54_55SU1,SUW") "~/.config/guix/channels.scm" "no") :noweb yes

(list
 <<channels>>
 (channel
  (name 'guix)
  (url "https://github.com/nicolas-graves/guix")
  ;; (url "https://git.savannah.gnu.org/git/guix.git")
  ;; (commit "975966ba09e24d813cf94a794c4bd6375777372a")
  (introduction
   (make-channel-introduction
    "9edb3f66fd807b096b48283debdcddccfea34bad"
    (openpgp-fingerprint
     "BBB0 2DDF 2CEA F6A8 0D1D  E643 A2A0 6DF2 A33A 54FA"))))
 ;; (channel-with-substitutes-available
  ;; %default-guix-channel
  ;; "https://ci.guix.gnu.org")
  )
#+end_src

* Systems

** Base Configuration

This base configuration is shared between all of the machines I manage with Guix.  Since all of my machines are Lenovo ThinkPad laptops, the same basic configuration applies pretty cleanly across all of them.  This may change in the future.

Any configuration that derives from =base-operating-system= must invoke =guix system= in a specific way to ensure it gets loaded correctly:

#+begin_src sh

sudo -E guix system -L ~/.dotfiles/.config/guix/systems reconfigure ~/.dotfiles/.config/guix/systems/davinci.scm

#+end_src

*.config/guix/systems/base.scm:*

#+begin_src scheme :tangle ./system/base.scm

  ;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

(define-module (system base)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-26)

  #:use-module (guix gexp)

  #:use-module (gnu system)
  #:use-module (gnu system nss)
  #:use-module (gnu system keyboard)

  #:use-module (gnu bootloader)
  #:use-module (gnu bootloader grub)

  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services security-token)

  #:use-module (gnu packages)
  #:use-module (gnu packages base)
  #:use-module (gnu packages fonts)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages compression)
  #:use-module (gnu packages gnupg)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages ssh)
  #:use-module (gnu packages tls)

  #:use-module (services))


(define-public packages
  (let* ((spec->pkg (compose list specification->package+output)))
    (append
     (map spec->pkg '("nss-certs"
                      "vim"
                      "git"
                      "wireless-tools"
                      "exfat-utils"
                      "fuse-exfat"
                      "openssh-sans-x"
                      "openssl"
                      "zip"
                      "unzip"
                      "trash-cli"
                      "gnupg"
                      "htop"))
     %base-packages)))


(define-public system
  (operating-system
    (host-name "base")
    (timezone "Europe/Paris")
    (locale-libcs (list (canonical-package glibc)))
    (locale "fr_FR.utf8")
    (file-systems '())
    (keyboard-layout (keyboard-layout "fr"))
    (bootloader (bootloader-configuration
                 (bootloader grub-efi-bootloader)
                 (targets '("/boot/efi"))
		 (keyboard-layout keyboard-layout)))
    (name-service-switch %mdns-host-lookup-nss)))

#+end_src

** Desktop Configuration


#+begin_src scheme :tangle ./system/desktop.scm

;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.

(define-module (system desktop)
  #:use-module (gnu)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-26)
  #:use-module (guix gexp)
  #:use-module (guix packages)
  #:use-module (guix download)

  #:use-module (gnu system)
  #:use-module (gnu system keyboard)
  #:use-module (gnu system pam)

  #:use-module (gnu packages)
  #:use-module (gnu packages cups)
  #:use-module (gnu packages xorg)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages display-managers)
  #:use-module (gnu packages fonts)

  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services desktop)
  #:use-module (gnu services dbus)
  #:use-module (gnu services networking)
  #:use-module (gnu services linux)
  #:use-module (gnu services xorg)
  #:use-module (gnu services cups)
  #:use-module (gnu services pm)

  #:use-module ((system base) :prefix base:)
  #:use-module (services))

#+end_src

Add a =udev= rule to enable members of the =video= group to control screen brightness.

#+begin_src scheme :tangle ./system/desktop.scm

;; Allow members of the "video" group to change the screen brightness.
(define %backlight-udev-rule
  (udev-rule
   "90-backlight.rules"
   (string-append "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chgrp video /sys/class/backlight/%k/brightness\""
                  "\n"
                  "ACTION==\"add\", SUBSYSTEM==\"backlight\", "
                  "RUN+=\"/run/current-system/profile/bin/chmod g+w /sys/class/backlight/%k/brightness\"")))

#+end_src

Override the default =%desktop-services= to add the =udev= backlight configuration and fix =pipewire= for wayland.

#+begin_src scheme :tangle ./system/desktop.scm
(define %my-desktop-services
  (let* ((path "/share/consolefonts/ter-132n")
         (font #~(string-append #$font-terminus #$path))
         (ttys '("tty1" "tty2" "tty3" "tty4" "tty5" "tty6")))
    (modify-services %desktop-services
      (udev-service-type
       config =>
       (udev-configuration
        (inherit config)
        (rules (cons* light
                      pipewire-0.3
                      (udev-configuration-rules config)))))
      (elogind-service-type
       config =>
       (elogind-configuration
        (inherit config)
        (handle-lid-switch-external-power 'suspend)))
      (console-font-service-type
       config =>
       (map (cut cons <> font) ttys))
      ;; This is the part that adds pam-gnupg.
      ;; (login-service-type config =>
      ;;                     (login-configuration (inherit config)
      ;;                                          (gnupg? #f)))
      )))


(define-public services
  (cons*
   (pam-limits-service ;; This enables JACK to enter realtime mode
    (list
     (pam-limits-entry "@realtime" 'both 'rtprio 99)
     (pam-limits-entry "@realtime" 'both 'memlock 'unlimited)))
   (extra-special-file "/usr/bin/env"
		       (file-append coreutils "/bin/env"))
   (service thermald-service-type)
   (service bluetooth-service-type
            (bluetooth-configuration
             (auto-enable? #t)))
   (service cups-service-type
            (cups-configuration
             (extensions (list splix cups-filters))
             (default-paper-size "A4")
             (web-interface? #t)))
   (remove (lambda (service)
	     (eq? (service-kind service) gdm-service-type))
	   %my-desktop-services)))

(define-public groups
  (cons (user-group (system? #t) (name "realtime"))
	%base-groups))

#+end_src

Adding desktop packages and inheriting base system.

#+begin_src scheme :tangle ./system/desktop.scm

(define-public packages
(append
 base:packages
 (map specification->package
      '("ntfs-3g"
        ;; "sway@1.5.1"
        "qtwayland"
        "ripgrep"
        "rbw@1.4.3"
        "pinentry-qt"
        "vim"
        "intel-vaapi-driver"
        "libva-utils"))))

(define-public system base:system)
#+end_src

** System connections

First defining functions that allow the treatment of system connections.

#+begin_src scheme :tangle ./system/connections-utils.scm
;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.
(define-module (system connections-utils)
  #:use-module (ice-9 match)
  #:use-module (ice-9 format)
  #:use-module (srfi srfi-1)
  #:use-module (srfi srfi-9)
  #:use-module (srfi srfi-11)
  #:use-module (srfi srfi-26)
  #:use-module (gnu home services)
  #:use-module (gnu home-services-utils)
  #:use-module (gnu services)
  #:use-module (gnu services shepherd)
  #:use-module (gnu services configuration)
  #:use-module (gnu packages gnome)
  #:use-module (guix packages)
  #:use-module (guix gexp)
  #:use-module (guix monads)
  #:use-module (guix modules)
  #:use-module (guix build utils)
  #:use-module (guix utils)
  #:use-module (guix records)
  #:use-module ((guix import utils) #:select (flatten))
  #:export (system-connections-configuration
            system-connections-extension
            system-connections-service-type
            serialize-system-connections-config))

(define (serialize-connection-section-header name value)
  (format #f "[~a~a]\n" (uglify-field-name name)
	  (if value (format #f " \"~a\"" value) "")))

(define serialize-connection-section
  (match-lambda
    ((name options)
     (cons
      (serialize-connection-section-header name #f)
      (serialize-alist #f options)))
    ((name value options)
     (cons
      (serialize-connection-section-header name value)
      (serialize-alist #f options)))))

(define (serialize-connection-config field-name val)
  #~(string-append #$@(append-map serialize-connection-section val)))

(define connection-config? list?)

(define-configuration system-connection-extension
  (config
   (connection-config '())
   "List of system connections sections.  The same format as in
@code{home-git-configuration}."))

(define-configuration system-connections-configuration
  (package
   (package network-manager)
   "The NetworkManager package to use.")
  (config
   (connection-config '())
   "List of sections and corresponding options.  Something like this:

@lisp
`((sendmail
   ((annotate . #t))))
@end lisp

will turn into this:

@example
[sendmail]
annotate=true
@end example")
  (config-extra-content
   (string-or-gexp "")
   "String or value of string-valued g-exps will be added to the end
of the configuration file."))

(define (add-connections-configuration config)

  (define (serialize-boolean val)
    (if val "true" "false"))

  (define (serialize-val val)
    (cond
     ((list? val) (serialize-list val))
     ((boolean? val) (serialize-boolean val))
     ((or (number? val) (symbol? val)) (list (maybe-object->string val)))
     (else (list val))))

  (define (serialize-field key val)
    (let ((val (serialize-val val))
          (key (symbol->string key)))
      `(,key "=" ,@val "\n")))

  (let ((connection-config
         (map car (map cdr (system-connections-configuration-config config)))))
    (map
     (lambda (con)
       (let ((name (cdr (car (car (cdr (car con)))))))
         `(,(string-append "/etc/NetworkManager/system-connections.ln/"
                           (string-delete #\space name) ".nmconnection")
           ,(apply mixed-text-file
                   (string-delete #\space name)
                   (flatten (generic-serialize-ini-config
                             #:combine-ini interpose
                             #:combine-alist list
                             #:combine-section-alist cons*
                             #:serialize-field serialize-field
                             #:fields con))))))
     connection-config)))

;; (let ((connection-config
;;          (map car (map cdr (system-connections-configuration-config config)))))
;;     (with-directory-excursion "/etc/NetworkManager/"
;;       (when directory-exists? "system-connections"
;;             (copy-recursively "system-connections" "system-connections.bak")
;;             (delete-file-recursively "system-connections"))
;;       (mkdir-p "system-connections")
;;       (file-union
;;        "system-connections"
;;        ((map
;;         (lambda (con)
;;           (let ((name (cdr (car (car (cdr (car con)))))))
;;             `(,(string-append (string-delete #\space name) ".nmconnection")
;;               ,(apply
;;               mixed-text-file
;;               (string-delete #\space name)
;;               (flatten (generic-serialize-ini-config
;;                         #:combine-ini interpose
;;                         #:combine-alist list
;;                         #:combine-section-alist cons*
;;                         #:serialize-field serialize-field
;;                         #:fields con))))))
;;         connection-config)))))

(define (add-system-connection-packages config)
  (list (system-connections-configuration-package config)))

(define (system-connection-extensions original-config extension-configs)
  (system-connections-configuration
   (inherit original-config)
   (config
    (append (system-connections-configuration-config original-config)
	    (append-map
	     system-connection-extension-config extension-configs)))))

(define system-connections-service-type
  (service-type (name 'system-connections)
                (extensions
                 (list (service-extension
                        special-files-service-type
                        add-connections-configuration)
                       ;; (service-extension
                       ;;  home-profile-service-type
                       ;;  add-system-connection-packages)
                  ))
		(compose identity)
		(extend system-connection-extensions)
                (default-value (system-connections-configuration))
                (description "Install and configure system-connections for NetworkManager.")))

(define (generate-system-connections-documentation)
  (generate-documentation
   `((system-connections-configuration
      ,system-connections-configuration-fields))
   'system-connections-configuration))

#+end_src

Defining all system connections.

#+begin_src scheme :tangle ./system/connections.scm
;; NOTE: This file is generated from ~/.dotfiles/System.org.  Please see commentary there.
(define-module (system connections)
  #:use-module (system connections-utils)
  #:use-module (gnu services)
  #:use-module (gnu services shepherd)
  #:use-module (gnu services configuration)
  #:use-module (guix packages)
  #:use-module (guix gexp)
  #:use-module (guix build utils)
  #:use-module (ice-9 string-fun)
  #:use-module (ice-9 popen)
  #:use-module (ice-9 rdelim))

(define (wpa-psk-connection connection-id)
  (let* ((connection_id
           (string-replace-substring connection-id "-" "_"))
         (port
          (open-input-pipe
           (string-append "pass show wifi/" connection_id " 2>/dev/null")))
         (connection-psk (read-line port))
         (connection-name
          (when (string=? (read-delimited " " port) "Username:")
            (read-line port))))
    (close-pipe port)
    `(,connection-name
      ((connection
        ((id . ,connection-name)
         (uuid . ,connection-id)
         (type . wifi)))
       (wifi
        ((mode . infrastructure)
         (ssid . ,connection-name)))
       (wifi-security
        ((auth-alg . open)
         (key-mgmt . wpa-psk)
         (psk . ,connection-psk)))
       (ipv4 ((method . auto)))
       (ipv6 ((addr-gen-mode . stable-privacy)
              (method . auto)))))))

(define (wpa-eap-connection connection-id connection-eap)
  (let* ((connection_id
           (string-replace-substring connection-id "-" "_"))
         (port
          (open-input-pipe
           (string-append "pass show wifi/" connection_id " 2>/dev/null")))
         (connection-password (read-line port))
         (connection-identity
          (when (string=? (read-delimited " " port) "Username:")
            (read-line port)))
         (connection-name
          (when (string=? (read-delimited " " port) "URI:")
            (read-line port))))
    (close-pipe port)
    `(,connection-name
      ((connection
        ((id . ,connection-name)
         (uuid . ,connection-id)
         (type . wifi)))
       (wifi
        ((mode . infrastructure)
         (ssid . ,connection-name)))
       (wifi-security ((key-mgmt . wpa-eap)))
       ("802-1x"
        ((eap . ,connection-eap)
         (identity . ,connection-identity)
         (password . ,connection-password)
         (phase2-auth . mschapv2)))
       (ipv4 ((method . auto)))
       (ipv6 ((addr-gen-mode . stable-privacy)
              (method . auto)))))))

(define-public services
  (cons*
   (service
    system-connections-service-type
    (system-connections-configuration
     (config
      `(,(wpa-psk-connection "48d6ad3c-a415-4f46-b4db-6722f30d6ce4")
        ,(wpa-psk-connection "6aa57df9-ce9f-4fa7-a0de-c13f9120b392")
        ,(wpa-psk-connection "100deaa3-5775-46f2-ba53-1641889f5934")
        ,(wpa-psk-connection "dfb8c014-f4a0-4484-ac0e-48a5f7ad1b28")
        ,(wpa-psk-connection "e525ce2a-05f7-45d0-9cce-22ca44d9eaac")
        ,(wpa-psk-connection "2aa8f21b-ce79-42f9-8475-82c1f3f6a091")
        ,(wpa-psk-connection "9dceec52-08b0-4b60-8254-0cfb386d8e19")
        ,(wpa-psk-connection "dba6f528-451f-440e-953b-c9d2ebae61d4")
        ,(wpa-psk-connection "7db52c41-bec4-4763-977d-873e07377fc3")
        ,(wpa-psk-connection "85a2f17b-39f4-4ff9-8914-0b175a266913")
        ,(wpa-psk-connection "92c2cea4-f8c1-4ff3-a71d-9512309a09ba")
        ,(wpa-psk-connection "8213663d-a88f-430c-804f-916e97238692")
        ,(wpa-psk-connection "683a3c4d-9d63-444f-819d-91f9ad512cdc")
        ,(wpa-psk-connection "62d31516-d06a-4a2b-b240-5b39866eace8")
        ,(wpa-psk-connection "d5d5ed62-5a95-47e9-8c80-2aba90d8cab1")
        ,(wpa-eap-connection
          "61201506-ff48-4e37-9089-083bfb0384b0" "peap;")
        ,(wpa-eap-connection
          "e7d0c5aa-92fe-4686-bd54-0bc447ddf775" "ttls;")
        ,(wpa-eap-connection
          "8f03eb94-be5c-4d44-a6f7-f2c8290d4552" "ttls;")
        ,(let* ((connection-id "dfacb629-a107-4714-a4f6-7d6bf2e661f0")
                (connection_id
                 (string-replace-substring connection-id "-" "_"))
                (port
                 (open-input-pipe
                  (string-append "pass show wifi/" connection_id " 2>/dev/null")))
                (connection-password (read-line port))
                (connection-identity
                 (when (string=? (read-delimited " " port) "Username:")
                   (read-line port)))
                (connection-name
                 (when (string=? (read-delimited " " port) "URI:")
                   (read-line port))))
           `(,connection-name
             ((connection
               ((id . ,connection-name)
                (uuid . ,connection-id)
                (type . ethernet)))
              ;; (ethernet . (#~""))
              ("802-1x"
               ((eap . "ttls;")
                (identity . ,connection-identity)
                (password . ,connection-password)
                (phase2-autheap . mschapv2)))
              (ipv4 ((method . auto)))
              (ipv6 ((addr-gen-mode . stable-privacy)
                     (method . auto))))))
         ))
     ))))
#+end_src

Note that we added a few lines in the Makefile for allowing NetworkManager to work with plain-files instead of links, which seem to not be allowed by NetworkManager.

** Yggdrasil

#+begin_src scheme :tangle ./system/yggdrasil.scm
(define-module (system yggdrasil)
  #:use-module (guix gexp)
  #:use-module (guix store)

  #:use-module (gnu system)
  #:use-module (gnu system shadow)
  #:use-module (gnu system file-systems)

  #:use-module (gnu packages)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages wm)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages databases)

  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services linux)
  #:use-module (gnu services pm)
  #:use-module (gnu services xorg)
  #:use-module (gnu services databases)

  #:use-module (nongnu system linux-initrd)
  #:use-module (nongnu packages linux)

  #:use-module ((system desktop) #:prefix desktop:)
  #:use-module ((system connections) #:prefix connections:)
  #:use-module (home services pam-gnupg)
  #:use-module (ice-9 rdelim)
  #:use-module (ice-9 popen))

(define product-name
  (call-with-input-file "/sys/devices/virtual/dmi/id/product_name"
    (lambda (port)
      (read-line port))))

(define substitutes-service-uri
  (let* ((port
          (open-input-pipe
           (string-append "pass show service/service_substitutes 2>/dev/null")))
         (uri
          (when (string=? (read-delimited " " port) "URI:")
            (read-line port))))
    (close-pipe port)
    uri))

(define users
  (cons*
   (user-account
    (name "graves")
    (group "users")
    (supplementary-groups '("wheel" "netdev" "tty" "input" "realtime"  "audio" "video" "lp"))
    (home-directory "/home/graves")
    (shell (file-append bash "/bin/bash")))
   %base-user-accounts))


(define file-systems
  (cons* (file-system
           (device "/dev/sda3")
           (mount-point "/")
           (type "ext4"))
         (file-system
           (device "/dev/sda4")
           (mount-point "/home")
           (type "ext4"))
         (file-system
           (device "/dev/sda1")
           (mount-point "/boot/efi")
           (type "vfat"))
         %base-file-systems))


(define yggdrasil-services
   (cons*
    (service tlp-service-type
	     (tlp-configuration
	      (cpu-boost-on-ac? #t)
	      (wifi-pwr-on-bat? #t)))
    (service
     screen-locker-service-type
     (screen-locker
      "swaylock"
      (file-append swaylock "/bin/swaylock")
      #f))
    connections:services
    (service postgresql-service-type
             (postgresql-configuration
              (postgresql postgresql-14)))
   ;;(service
   ;; pam-gnupg-service-type
   ;; (pam-gnupg-configuration
   ;;  (keyring pam-gnupg)
   ;;  (pam-services '(("login" . login) ("passwd" . passwd)))))
   (modify-services desktop:services
     (guix-service-type
      config =>
      (guix-configuration
       (inherit config)
       (substitute-urls (cons*
                         "https://substitutes.nonguix.org"
                         (string-append "https://" substitutes-service-uri)
                         %default-substitute-urls))
       (authorized-keys (cons*
                         (local-file "../keys/nonguix.pub")
                         (local-file "../keys/my-substitutes-key.pub")
                         %default-authorized-guix-keys)))))))

(define packages
  (append
   desktop:packages
   (map specification->package
        '("curl"
          "htop"
          "swaylock"))))

(operating-system
  (inherit desktop:system)
  (initrd microcode-initrd)
  (host-name product-name)
  (kernel linux)
  (firmware (list linux-firmware))
  (swap-devices (list (swap-space (target "/dev/sda2"))))
  (file-systems file-systems)
  (users users)
  (groups desktop:groups)
  (packages packages)
  (services yggdrasil-services))

#+end_src

** USB Installation Image

To install Guix on another machine, you first to build need a USB image.  Since I use modern laptops that require non-free components, I have to build a custom installation image with the full Linux kernel.  I also include a few other programs that are useful for the installation process.  I adapted this image from [[https://gitlab.com/nonguix/nonguix/blob/master/nongnu/system/install.scm][one found on the Nonguix repository]], hence the copyright header.

*.config/guix/system/install.scm:*

#+begin_src scheme :tangle ./system/install.scm
;;; Copyright © 2019 Alex Griffin <a@ajgrf.com>
;;; Copyright © 2019 Pierre Neidhardt <mail@ambrevar.xyz>
;;; Copyright © 2019 David Wilson <david@daviwil.com>
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation, either version 3 of the License, or
;;; (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;; Generate a bootable image (e.g. for USB sticks, etc.) with:
;; $ guix system disk-image nongnu/system/install.scm

(define-module (system install)
  #:use-module (guix gexp)
  #:use-module (guix modules)
  #:use-module (gnu services)
  #:use-module (gnu services base)
  #:use-module (gnu services shepherd)
  #:use-module (gnu system)
  #:use-module (gnu system file-systems)
  #:use-module (gnu system install)
  #:use-module (gnu system accounts)
  #:use-module (gnu system shadow)
  #:use-module (gnu packages)
  #:use-module (gnu packages version-control)
  #:use-module (gnu packages vim)
  #:use-module (gnu packages bash)
  #:use-module (gnu packages curl)
  #:use-module (gnu packages emacs)
  #:use-module (gnu packages linux)
  #:use-module (gnu packages mtools)
  #:use-module (gnu packages file-systems)
  #:use-module (nongnu packages linux)
  #:use-module ((system desktop) #:prefix desktop:)
  #:use-module ((system connections) #:prefix connections:)
  #:use-module (home yggdrasil rbw)
  #:export (installation-os-nonfree))

#+end_src

Defining =cow-store-service-type=, copied from =guix= source, because it is not exported there.

#+begin_src scheme :tangle ./system/install.scm
(define %backing-directory
  ;; Sub-directory used as the backing store for copy-on-write.
  "/tmp/guix-inst")

(define cow-store-service-type
  (shepherd-service-type
   'cow-store
   (lambda _
     (define (import-module? module)
       ;; Since we don't use deduplication support in 'populate-store', don't
       ;; import (guix store deduplication) and its dependencies, which
       ;; includes Guile-Gcrypt.
       (and (guix-module-name? module)
            (not (equal? module '(guix store deduplication)))))

     (shepherd-service
      (requirement '(root-file-system user-processes))
      (provision '(cow-store))
      (documentation
       "Make the store copy-on-write, with writes going to \
the given target.")

      ;; This is meant to be explicitly started by the user.
      (auto-start? #f)

      (modules `((gnu build install)
                 ,@%default-modules))
      (start
       (with-imported-modules (source-module-closure
                               '((gnu build install))
                               #:select? import-module?)
         #~(case-lambda
             ((target)
              (mount-cow-store target #$%backing-directory)
              target)
             (else
              ;; Do nothing, and mark the service as stopped.
              #f))))
      (stop #~(lambda (target)
                ;; Delete the temporary directory, but leave everything
                ;; mounted as there may still be processes using it since
                ;; 'user-processes' doesn't depend on us.  The 'user-file-systems'
                ;; service will unmount TARGET eventually.
                (delete-file-recursively
                 (string-append target #$%backing-directory))))))
   (description "Make the store copy-on-write, with writes going to \
the given target.")))

(define (cow-store-service)
  "Return a service that makes the store copy-on-write, such that writes go to
the user's target storage device rather than on the RAM disk."
  ;; See <http://bugs.gnu.org/18061> for the initial report.
  (service cow-store-service-type 'mooooh!))

#+end_src

Define the actual OS exported.

#+begin_src scheme :tangle ./system/install.scm
(define packages
  (append
   desktop:packages
   (map specification->package
        '("curl"
          "htop"
          "emacs-no-x-toolkit"
          "network-manager"
          "swaylock"
          "glibc"
          "fontconfig"
          "font-dejavu"
          "font-gnu-unifont"
          "grub"
          "make"
          "dosfstools"
          "pinentry"
          "rbw@1.4.3"
          "nss-certs"))))

(define services
   (cons*
    ;; (service tlp-service-type
    ;;          (tlp-configuration
    ;;           (cpu-boost-on-ac? #t)
    ;;           (wifi-pwr-on-bat? #t)))
    ;; (service
    ;;  screen-locker-service-type
    ;;  (screen-locker "swaylock"
    ;;                 (file-append swaylock "/bin/swaylock")
    ;;                 #f))

    ;; connections:services
    ;; Add the 'cow-store' service, which users have to start manually
    ;; since it takes the installation directory as an argument.
    (cow-store-service)

    ;; To facilitate copy/paste.
    (service gpm-service-type)

    (modify-services desktop:services
      (guix-service-type
       config => (guix-configuration
                  (inherit config)
                  (substitute-urls (cons*
                                    "https://substitutes.nonguix.org"
                                    ;; (string-append "https://" (getenv "URI_service_substitutes"))
                                    %default-substitute-urls))
                  (authorized-keys (cons*
                                    (local-file "../keys/nonguix.pub")
                                    (local-file "../keys/my-substitutes-key.pub")
                                    %default-authorized-guix-keys)))))))

(define installation-os-nonfree
  (operating-system
    (inherit installation-os)
    (kernel linux)
    (firmware (list linux-firmware))
    (services services)
    (skeletons
     `((".config_rbw_config.json" ,rbw-config-bitwarden)
       (".config_guix_channels.scm" ,(local-file "../channels.base"))))

    ;; Add some extra packages useful for the installation process
    (packages packages)))

installation-os-nonfree
#+end_src

* Dotfiles Management

Since I keep all of my important configuration files in Org Mode code blocks, I have to ensure that the real configuration files are kept up to date when I sync the latest changes to my [[https://github.com/daviwil/dotfiles][dotfiles]] repo.  I've written a couple of scripts to simplify that process:

** Syncing

When I want to sync my dotfiles repo into my local clone which likely has uncommitted changes, I run =sync-dotfiles=.  This script first makes sure that all Org files are saved in a running Emacs instance and then stashes everything before pulling the latest changes from =origin=.  After pulling, the stash is popped and then the script verifies there are no merge conflicts from the stash before proceeding.  If there are no conflicts, =update-dotfiles= is run, otherwise I'll fix the merge conflicts manually and run =update-dotfiles= myself.

*.bin/sync-dotfiles*

#+begin_src sh :tangle home/scripts/sync-dotfiles :shebang #!/bin/sh

# Sync dotfiles repo and ensure that dotfiles are tangled correctly afterward

GREEN='\033[1;32m'
BLUE='\033[1;34m'
RED='\033[1;30m'
NC='\033[0m'

# Navigate to the directory of this script (generally ~/.dotfiles/.bin)
cd $(dirname $(readlink -f $0))
cd ..

echo
echo -e "${BLUE}Saving Org buffers if Emacs is running...${NC}"
emacsclient -u -e "(org-save-all-org-buffers)" -a "echo 'Emacs is not currently running'"

echo -e "${BLUE}Stashing existing changes...${NC}"
stash_result=$(git stash push -m "sync-dotfiles: Before syncing dotfiles")
needs_pop=1
if [ "$stash_result" = "No local changes to save" ]; then
    needs_pop=0
fi

echo -e "${BLUE}Pulling updates from dotfiles repo...${NC}"
echo
git pull origin master
echo

if [[ $needs_pop -eq 1 ]]; then
    echo -e "${BLUE}Popping stashed changes...${NC}"
    echo
    git stash pop
fi

unmerged_files=$(git diff --name-only --diff-filter=U)
if [[ ! -z $unmerged_files ]]; then
   echo -e "${RED}The following files have merge conflicts after popping the stash:${NC}"
   echo
   printf %"s\n" $unmerged_files  # Ensure newlines are printed
else
    update-dotfiles
fi

#+end_src

** Updating

Updating my dotfiles requires running a script in Emacs to loop over all of my literate configuration =.org= files and run =org-babel-tangle-file= to make sure all of my configuration files are up to date.

*.bin/update-dotfiles*

#+begin_src sh :tangle home/scripts/update-dotfiles :shebang #!/bin/sh

  # Navigate to the directory of this script (generally ~/.dotfiles/.bin)
  cd $(dirname $(readlink -f $0))
  cd ..

  # The heavy lifting is done by an Emacs script
  emacs -Q --script ./.emacs.d/tangle-dotfiles.el

  # Make sure any running Emacs instance gets updated settings
  emacsclient -e '(load-file "~/.emacs.d/per-system-settings.el")' -a "echo 'Emacs is not currently running'"

  # Update configuration symlinks
  stow .

#+end_src

*.emacs.d/tangle-dotfiles.el*

#+begin_src emacs-lisp :tangle .emacs.d/tangle-dotfiles.el

  (require 'org)
  (load-file "~/.dotfiles/.emacs.d/lisp/dw-settings.el")

  ;; Don't ask when evaluating code blocks
  (setq org-confirm-babel-evaluate nil)

  (let* ((dotfiles-path (expand-file-name "~/.dotfiles"))
	 (org-files (directory-files dotfiles-path nil "\\.org$")))

    (defun dw/tangle-org-file (org-file)
      (message "\n\033[1;32mUpdating %s\033[0m\n" org-file)
      (org-babel-tangle-file (expand-file-name org-file dotfiles-path)))

    ;; Tangle Systems.org first
    (dw/tangle-org-file "Systems.org")

    (dolist (org-file org-files)
      (unless (member org-file '("README.org" "Systems.org"))
      	(dw/tangle-org-file org-file))))

#+end_src

* System Installation

Here's a guide for how I install my GNU Guix systems from scratch.  This process is simplified because I've already prepared a reusable system configuration so you might need to do extra work if you end up following this for your own system install.

** Building the Installation Image

Since I use modern Thinkpads, I have to use the non-free kernel and firmware blobs from the [[https://gitlab.com/nonguix/nonguix][nonguix]] channel.  After cloning the repo, the installation image can be built with this command:

#+begin_src sh

  # Create a slightly larger install image to have some headroom
  # for temporary file creation and avoid "no space free" errors
  GUILE_LOAD_PATH=./ guix system image ./system/install.scm --image-size=6G

#+end_src

*NOTE:* It can take an hour or more for this to complete, so be patient...

Once the build is complete, Guix will print out the path to the disk image file that was created.  You can now write the installation image to a USB stick using =dd=:

#+begin_src sh

  sudo dd if=/gnu/store/{sha256}-disk-image of=/dev/sdX status=progress

#+end_src

** Installing Guix

TODO Adapt the process to my new installation image.
With the newly "burned" installation image, boot from the USB drive and choose "Install using the shell based process."

*** Setting up WiFi

Use an editor (or =echo=) to create a new file called =wifi.conf= to store the wifi configuration.  Make sure to set =ssid= to the name of your wifi access point and =psk= to the passphrase for your wifi.  You may also need to change the =key_mgmt= parameter depending on the type of authentication your wifi router supports ([[https://wiki.archlinux.org/index.php/Wpa_supplicant#Configuration][some examples]] on Arch Wiki).

#+begin_src

  network={
    ssid="ssid-name"
    key_mgmt=WPA-PSK
    psk="unencrypted passphrase"
  }

#+end_src

First, run the following commands to unblock the wifi card, determine its device name, and connect using the device name you received from =ifconfig -a=.  In my case it's =wlp4s0= so I run the command like so:

#+begin_src sh

  rfkill unblock all
  ifconfig -a
  wpa_supplicant -c wifi.conf -i wlp4s0 -B

#+end_src

#+begin_quote

*NOTE:* If for any reason running =wpa_supplicant= fails, make sure to kill any background instances of it before trying to run it again because the old instances will block new runs from working.  This wasted a couple hours of my time the first time I tried installing Guix!

#+end_quote

The last step to set up networking is to run =dhclient= to turn on DNS for your wifi connection:

#+begin_src sh

  dhclient -v wlp4s0

#+end_src

*** Setting Up Partitions

Since we're installing on a ThinkPad with UEFI, follow the [[https://guix.gnu.org/manual/en/guix.html#Disk-Partitioning][instructions in the Guix manual]] for disk partitioning.  The short of it is that you need to use =cfdisk= to create a partition in your free space:

#+begin_src sh

  cfdisk /dev/nvme0n1

#+end_src

Once you have your Linux root partition set up, you can enable LUKS to encrypt that partition by running the following commands (where =/dev/nvme0n1p5= is your root partition and =system-root= is an arbitrary label you'd like to use for it):

#+begin_src sh

  cryptsetup luksFormat /dev/nvme0n1p5
  cryptsetup open --type luks /dev/nvme0n1p5 system-root
  mkfs.ext4 -L system-root /dev/mapper/system-root
  mount LABEL=system-root /mnt

#+end_src

Finally, make sure to mount your EFI partition to =/mnt/boot= so that the installer can install the bootloader.  The Guix installation instructions obscure this step slightly so it's easy to miss:

#+begin_src sh

  mkdir -p /mnt/boot/efi
  mount /dev/<EFI partition> /mnt/boot/efi

#+end_src

Now your EFI and encrypted root filesystems are mounted so you can proceed with system installation.  You must now set up the installation enviornment using =herd=:

#+begin_src sh

  herd start cow-store /mnt

#+end_src

*** Initial System Installation

If you've got a system configuration prepared already, you can use =git= to pull it down into the current directory (the one you're already in, not =/mnt=):

#+begin_src sh

  git clone https://github.com/daviwil/dotfiles

#+end_src

One important step before you attempt system installation is to set up the =nonguix= channel so that the system can be installed from it.  Once you've cloned your dotfiles repo, you can place your =channels.scm= file into the root user's =.config/guix= path and then run =guix pull= to activate it:

#+begin_src sh

  mkdir -p ~/.config/guix
  cp dotfiles/guix/channels.scm ~/.config/guix
  guix pull
  hash guix  # This is necessary to ensure the updated profile path is active!

#+end_src

The pull operation may take a while depending on how recently you generated your installation USB image (if packages in the main Guix repository have been updated since then).

Once your channels are set up, you will need to tweak your configuration to reflect the partition UUIDs and labels for the system that you are installing.  To figure out the UUID of your encrypted root partition, you can use the following command:

#+begin_src sh

  cryptsetup luksUUID /dev/<root partition>

#+end_src

#+begin_quote

**TIP:** To make it easier to copy the UUID into your config file, you can switch to another tty using =Ctrl-Alt-F4= and press =Enter= to get to another root prompt.  You can then switch back and forth between the previous TTY on =F3=.

#+end_quote

Now you can initialize your system using the following command:

#+begin_src sh

  guix system -L ~/.dotfiles/.config/guix/systems init path/to/config.scm /mnt

#+end_src

This could take a while, so make sure your laptop is plugged in and let it run.  If you see any errors during installation, don't fret, you can usually resume from where you left off because your Guix store will have any packages that were already installed.

*** Initial System Setup

Congrats!  You now have a new Guix system installed, reboot now to complete the initial setup of your user account.

The first thing you'll want to do when you land at the login prompt is login as =root= and immediately change the =root= and user passwords using =passwd= (there isn't a root password by default!):

#+begin_src sh

  passwd             # Set passwd for 'root'
  passwd <username>  # Set password for your user account (no angle brackets)

#+end_src

Now log into your user account and clone your dotfiles repository.

Since we used the =nonguix= channel to install the non-free Linux kernel, we'll need to make sure that channel is configured in our user account so that we have access to those packages the next time we =guix pull=.  At the moment I just symlink the Guix config folder from my =.dotfiles= to =~/.config/guix=:

#+begin_src sh

  ln -sf ~/.dotfiles/guix ~/.config/guix

#+end_src

Verify that your =channels.scm= file is in the target path (=~/.config/guix/channels.scm=) and then run =guix pull= to sync in the new channel.

Now you can install the packages that you want to use for day-to-day activities.  I separate different types of packages into individual manifest files and manage them with my =activate-profiles= script:

#+begin_src sh

  activate-profiles desktop emacs

#+end_src

Now the packages for these manifests will be installed and usable.  They can be updated in the future by using the =update-profiles= script.
